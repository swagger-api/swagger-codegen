/**
 * Swagger Petstore
 * This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Headers }                                           from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';


import { ApiResponse } from '../model/apiResponse';
import { Body1 } from '../model/body1';
import { Body2 } from '../model/body2';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { MacawParakeet } from '../model/macawParakeet';
import { Pet } from '../model/pet';


import { Configuration }                                     from '../configuration';


export interface PetServiceInterface {
    defaultHeaders: Headers;
    configuration: Configuration;
    [others: string]: any;

    /**
    * Add a new parrow to the store
    * 
    * @param body 
    */
    addParrot(body?: Body2, extraHttpRequestParams?: any): Observable<InlineResponse2001>;

    /**
    * Add a new pet to the store
    * 
    * @param body Pet object that needs to be added to the store
    */
    addPet(body: Pet, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Deletes a pet
    * 
    * @param petId Pet id to delete
    * @param apiKey 
    */
    deletePet(petId: number, apiKey?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Find pet by ID
    * schedule pet feeding
    * @param body Pet object that needs to be added to the store
    * @param petId ID of pet to return
    * @param petType type of food
    * @param status status
    * @param sessionId session id
    * @param token status
    */
    feedPet(body: Pet, petId: number, petType: string, status: string, sessionId: string, token: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Finds Pets by status
    * Multiple status values can be provided with comma separated strings
    * @param status Status values that need to be considered for filter
    */
    findPetsByStatus(status: Array<string>, extraHttpRequestParams?: any): Observable<Array<Pet>>;

    /**
    * Finds Pets by tags
    * Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.
    * @param tags Tags to filter by
    */
    findPetsByTags(tags: Array<string>, extraHttpRequestParams?: any): Observable<Array<Pet>>;

    /**
    * get Parrots
    * 
    */
    getParrots(extraHttpRequestParams?: any): Observable<Array<Macaw | Parakeet>>;

    /**
    * Find pet by ID
    * Returns a single pet
    * @param petId ID of pet to return
    */
    getPetById(petId: number, extraHttpRequestParams?: any): Observable<Pet>;

    /**
    * update parrots
    * 
    * @param body 
    */
    updateParrots(body?: Body1, extraHttpRequestParams?: any): Observable<InlineResponse200>;

    /**
    * Update an existing pet
    * 
    * @param body Pet object that needs to be added to the store
    */
    updatePet(body: Pet, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Updates a pet in the store with form data
    * 
    * @param petId ID of pet that needs to be updated
    * @param name 
    * @param status 
    */
    updatePetWithForm(petId: number, name?: string, status?: string, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * uploads an image
    * 
    * @param petId ID of pet to update
    * @param body 
    */
    uploadFile(petId: number, body?: Object, extraHttpRequestParams?: any): Observable<ApiResponse>;

}
