/* 
 * Swagger Petstore
 *
 * This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AllOfSubCategoryCategory
    /// </summary>
    [DataContract]
        public partial class AllOfSubCategoryCategory : Category,  IEquatable<AllOfSubCategoryCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AllOfSubCategoryCategory" /> class.
        /// </summary>
        /// <param name="foo">foo.</param>
        /// <param name="bar">bar.</param>
        /// <param name="beer">beer.</param>
        /// <param name="drunk">drunk.</param>
        public AllOfSubCategoryCategory(bool? foo = default(bool?), int? bar = default(int?), string beer = default(string), User drunk = default(User), long? id = default(long?), string name = default(string), List<Category> subcategories = default(List<Category>)) : base(id, name, subcategories)
        {
            this.Foo = foo;
            this.Bar = bar;
            this.Beer = beer;
            this.Drunk = drunk;
        }
        
        /// <summary>
        /// Gets or Sets Foo
        /// </summary>
        [DataMember(Name="foo", EmitDefaultValue=false)]
        public bool? Foo { get; set; }

        /// <summary>
        /// Gets or Sets Bar
        /// </summary>
        [DataMember(Name="bar", EmitDefaultValue=false)]
        public int? Bar { get; set; }

        /// <summary>
        /// Gets or Sets Beer
        /// </summary>
        [DataMember(Name="beer", EmitDefaultValue=false)]
        public string Beer { get; set; }

        /// <summary>
        /// Gets or Sets Drunk
        /// </summary>
        [DataMember(Name="drunk", EmitDefaultValue=false)]
        public User Drunk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AllOfSubCategoryCategory {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Foo: ").Append(Foo).Append("\n");
            sb.Append("  Bar: ").Append(Bar).Append("\n");
            sb.Append("  Beer: ").Append(Beer).Append("\n");
            sb.Append("  Drunk: ").Append(Drunk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AllOfSubCategoryCategory);
        }

        /// <summary>
        /// Returns true if AllOfSubCategoryCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of AllOfSubCategoryCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AllOfSubCategoryCategory input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Foo == input.Foo ||
                    (this.Foo != null &&
                    this.Foo.Equals(input.Foo))
                ) && base.Equals(input) && 
                (
                    this.Bar == input.Bar ||
                    (this.Bar != null &&
                    this.Bar.Equals(input.Bar))
                ) && base.Equals(input) && 
                (
                    this.Beer == input.Beer ||
                    (this.Beer != null &&
                    this.Beer.Equals(input.Beer))
                ) && base.Equals(input) && 
                (
                    this.Drunk == input.Drunk ||
                    (this.Drunk != null &&
                    this.Drunk.Equals(input.Drunk))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Foo != null)
                    hashCode = hashCode * 59 + this.Foo.GetHashCode();
                if (this.Bar != null)
                    hashCode = hashCode * 59 + this.Bar.GetHashCode();
                if (this.Beer != null)
                    hashCode = hashCode * 59 + this.Beer.GetHashCode();
                if (this.Drunk != null)
                    hashCode = hashCode * 59 + this.Drunk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
