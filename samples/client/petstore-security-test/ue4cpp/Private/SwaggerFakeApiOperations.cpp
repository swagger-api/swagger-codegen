/**
 * Swagger Petstore *_/ ' \" =end -- \\r\\n \\n \\r
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  *_/ ' \" =end --       
 *
 * OpenAPI spec version: 1.0.0 *_/ ' \" =end -- \\r\\n \\n \\r
 * Contact: apiteam@swagger.io *_/ ' \" =end -- \\r\\n \\n \\r
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerFakeApiOperations.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Swagger 
{

FString SwaggerFakeApi::TestCodeInjectEndRnNRRequest::ComputePath() const
{
	FString Path(TEXT("/fake"));
	return Path;
}

void SwaggerFakeApi::TestCodeInjectEndRnNRRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json"), TEXT("*_/ '  =end --       ") };
	//static const TArray<FString> Produces = { TEXT("application/json"), TEXT("*_/ '  =end --       ") };

	HttpRequest->SetVerb(TEXT("PUT"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		UE_LOG(LogSwagger, Error, TEXT("Form parameter (test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r) was ignored, cannot be used in JsonBody"));
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		HttpMultipartFormData FormData;
		if(TestCodeInjectEndRnNR.IsSet())
		{
			FormData.AddStringPart(TEXT("test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r"), *ToUrlString(TestCodeInjectEndRnNR.GetValue()));
		}

		FormData.SetupHttpRequest(HttpRequest);
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		TArray<FString> FormParams;
		if(TestCodeInjectEndRnNR.IsSet())
		{
			FormParams.Add(FString(TEXT("test code inject */ &#39; &quot; &#x3D;end -- \r\n \n \r=")) + ToUrlString(TestCodeInjectEndRnNR.GetValue()));
		}
		
		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/x-www-form-urlencoded; charset=utf-8"));
		HttpRequest->SetContentAsString(FString::Join(FormParams, TEXT("&")));
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerFakeApi::TestCodeInjectEndRnNRResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 400:
		SetResponseString(TEXT("To test code injection *_/ &#39; \&quot; &#x3D;end -- \\r\\n \\n \\r"));
		break;
	}
}

bool SwaggerFakeApi::TestCodeInjectEndRnNRResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
