/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerUser.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Templates/SharedPointer.h"

namespace Swagger 
{

void SwaggerUser::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());	
	}
	if (Username.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("username")); WriteJsonValue(Writer, Username.GetValue());	
	}
	if (FirstName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("firstName")); WriteJsonValue(Writer, FirstName.GetValue());	
	}
	if (LastName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lastName")); WriteJsonValue(Writer, LastName.GetValue());	
	}
	if (Email.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("email")); WriteJsonValue(Writer, Email.GetValue());	
	}
	if (Password.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("password")); WriteJsonValue(Writer, Password.GetValue());	
	}
	if (Phone.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("phone")); WriteJsonValue(Writer, Phone.GetValue());	
	}
	if (UserStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userStatus")); WriteJsonValue(Writer, UserStatus.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool SwaggerUser::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("username"), Username);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("firstName"), FirstName);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("lastName"), LastName);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("email"), Email);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("password"), Password);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("phone"), Phone);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("userStatus"), UserStatus);

	return ParseSuccess;
}
}
