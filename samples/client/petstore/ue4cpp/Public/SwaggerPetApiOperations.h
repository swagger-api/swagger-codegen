/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerPetApi.h"

#include "SwaggerHelpers.h"
#include "SwaggerApiResponse.h"
#include "SwaggerPet.h"

namespace Swagger 
{

/* Add a new pet to the store
 *
 * 
*/
class SWAGGER_API SwaggerPetApi::AddPetRequest : public Request
{
public:
    virtual ~AddPetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Pet object that needs to be added to the store */
	SwaggerPet Body;
};

class SWAGGER_API SwaggerPetApi::AddPetResponse : public Response
{
public:
    virtual ~AddPetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Deletes a pet
 *
 * 
*/
class SWAGGER_API SwaggerPetApi::DeletePetRequest : public Request
{
public:
    virtual ~DeletePetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Pet id to delete */
	int64 PetId;
	TOptional<FString> ApiKey;
};

class SWAGGER_API SwaggerPetApi::DeletePetResponse : public Response
{
public:
    virtual ~DeletePetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Finds Pets by status
 *
 * Multiple status values can be provided with comma separated strings
*/
class SWAGGER_API SwaggerPetApi::FindPetsByStatusRequest : public Request
{
public:
    virtual ~FindPetsByStatusRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	enum class StatusEnum
	{
		Available,
		Pending,
		Sold,
  	};
	/* Status values that need to be considered for filter */
	TArray<StatusEnum> Status;
};

class SWAGGER_API SwaggerPetApi::FindPetsByStatusResponse : public Response
{
public:
    virtual ~FindPetsByStatusResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TArray<SwaggerPet> Content;
};

/* Finds Pets by tags
 *
 * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
*/
class SWAGGER_API SwaggerPetApi::FindPetsByTagsRequest : public Request
{
public:
    virtual ~FindPetsByTagsRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Tags to filter by */
	TArray<FString> Tags;
};

class SWAGGER_API SwaggerPetApi::FindPetsByTagsResponse : public Response
{
public:
    virtual ~FindPetsByTagsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    TArray<SwaggerPet> Content;
};

/* Find pet by ID
 *
 * Returns a single pet
*/
class SWAGGER_API SwaggerPetApi::GetPetByIdRequest : public Request
{
public:
    virtual ~GetPetByIdRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* ID of pet to return */
	int64 PetId;
};

class SWAGGER_API SwaggerPetApi::GetPetByIdResponse : public Response
{
public:
    virtual ~GetPetByIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    SwaggerPet Content;
};

/* Update an existing pet
 *
 * 
*/
class SWAGGER_API SwaggerPetApi::UpdatePetRequest : public Request
{
public:
    virtual ~UpdatePetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Pet object that needs to be added to the store */
	SwaggerPet Body;
};

class SWAGGER_API SwaggerPetApi::UpdatePetResponse : public Response
{
public:
    virtual ~UpdatePetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Updates a pet in the store with form data
 *
 * 
*/
class SWAGGER_API SwaggerPetApi::UpdatePetWithFormRequest : public Request
{
public:
    virtual ~UpdatePetWithFormRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* ID of pet that needs to be updated */
	int64 PetId;
	/* Updated name of the pet */
	TOptional<FString> Name;
	/* Updated status of the pet */
	TOptional<FString> Status;
};

class SWAGGER_API SwaggerPetApi::UpdatePetWithFormResponse : public Response
{
public:
    virtual ~UpdatePetWithFormResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* uploads an image
 *
 * 
*/
class SWAGGER_API SwaggerPetApi::UploadFileRequest : public Request
{
public:
    virtual ~UploadFileRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* ID of pet to update */
	int64 PetId;
	/* Additional data to pass to server */
	TOptional<FString> AdditionalMetadata;
	/* file to upload */
	TOptional<HttpFileInput> File;
};

class SWAGGER_API SwaggerPetApi::UploadFileResponse : public Response
{
public:
    virtual ~UploadFileResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    SwaggerApiResponse Content;
};

}
