/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerUserApi.h"

#include "SwaggerUser.h"

namespace Swagger 
{

/* Create user
 *
 * This can only be done by the logged in user.
*/
class SWAGGER_API SwaggerUserApi::CreateUserRequest : public Request
{
public:
    virtual ~CreateUserRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Created user object */
	SwaggerUser Body;
};

class SWAGGER_API SwaggerUserApi::CreateUserResponse : public Response
{
public:
    virtual ~CreateUserResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Creates list of users with given input array
 *
 * 
*/
class SWAGGER_API SwaggerUserApi::CreateUsersWithArrayInputRequest : public Request
{
public:
    virtual ~CreateUsersWithArrayInputRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* List of user object */
	TArray<SwaggerUser> Body;
};

class SWAGGER_API SwaggerUserApi::CreateUsersWithArrayInputResponse : public Response
{
public:
    virtual ~CreateUsersWithArrayInputResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Creates list of users with given input array
 *
 * 
*/
class SWAGGER_API SwaggerUserApi::CreateUsersWithListInputRequest : public Request
{
public:
    virtual ~CreateUsersWithListInputRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* List of user object */
	TArray<SwaggerUser> Body;
};

class SWAGGER_API SwaggerUserApi::CreateUsersWithListInputResponse : public Response
{
public:
    virtual ~CreateUsersWithListInputResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Delete user
 *
 * This can only be done by the logged in user.
*/
class SWAGGER_API SwaggerUserApi::DeleteUserRequest : public Request
{
public:
    virtual ~DeleteUserRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The name that needs to be deleted */
	FString Username;
};

class SWAGGER_API SwaggerUserApi::DeleteUserResponse : public Response
{
public:
    virtual ~DeleteUserResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Get user by user name
 *
 * 
*/
class SWAGGER_API SwaggerUserApi::GetUserByNameRequest : public Request
{
public:
    virtual ~GetUserByNameRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The name that needs to be fetched. Use user1 for testing. */
	FString Username;
};

class SWAGGER_API SwaggerUserApi::GetUserByNameResponse : public Response
{
public:
    virtual ~GetUserByNameResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    SwaggerUser Content;
};

/* Logs user into the system
 *
 * 
*/
class SWAGGER_API SwaggerUserApi::LoginUserRequest : public Request
{
public:
    virtual ~LoginUserRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* The user name for login */
	FString Username;
	/* The password for login in clear text */
	FString Password;
};

class SWAGGER_API SwaggerUserApi::LoginUserResponse : public Response
{
public:
    virtual ~LoginUserResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Logs out current logged in user session
 *
 * 
*/
class SWAGGER_API SwaggerUserApi::LogoutUserRequest : public Request
{
public:
    virtual ~LogoutUserRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerUserApi::LogoutUserResponse : public Response
{
public:
    virtual ~LogoutUserResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Updated user
 *
 * This can only be done by the logged in user.
*/
class SWAGGER_API SwaggerUserApi::UpdateUserRequest : public Request
{
public:
    virtual ~UpdateUserRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* name that need to be deleted */
	FString Username;
	/* Updated user object */
	SwaggerUser Body;
};

class SWAGGER_API SwaggerUserApi::UpdateUserResponse : public Response
{
public:
    virtual ~UpdateUserResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

}
