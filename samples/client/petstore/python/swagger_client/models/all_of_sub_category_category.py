# coding: utf-8

"""
    Swagger Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: apiteam@swagger.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.category import Category  # noqa: F401,E501

class AllOfSubCategoryCategory(Category):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'foo': 'bool',
        'bar': 'int',
        'beer': 'str',
        'drunk': 'User'
    }
    if hasattr(Category, "swagger_types"):
        swagger_types.update(Category.swagger_types)

    attribute_map = {
        'foo': 'foo',
        'bar': 'bar',
        'beer': 'beer',
        'drunk': 'drunk'
    }
    if hasattr(Category, "attribute_map"):
        attribute_map.update(Category.attribute_map)

    def __init__(self, foo=None, bar=None, beer=None, drunk=None, *args, **kwargs):  # noqa: E501
        """AllOfSubCategoryCategory - a model defined in Swagger"""  # noqa: E501
        self._foo = None
        self._bar = None
        self._beer = None
        self._drunk = None
        self.discriminator = None
        if foo is not None:
            self.foo = foo
        if bar is not None:
            self.bar = bar
        if beer is not None:
            self.beer = beer
        if drunk is not None:
            self.drunk = drunk
        Category.__init__(self, *args, **kwargs)

    @property
    def foo(self):
        """Gets the foo of this AllOfSubCategoryCategory.  # noqa: E501


        :return: The foo of this AllOfSubCategoryCategory.  # noqa: E501
        :rtype: bool
        """
        return self._foo

    @foo.setter
    def foo(self, foo):
        """Sets the foo of this AllOfSubCategoryCategory.


        :param foo: The foo of this AllOfSubCategoryCategory.  # noqa: E501
        :type: bool
        """

        self._foo = foo

    @property
    def bar(self):
        """Gets the bar of this AllOfSubCategoryCategory.  # noqa: E501


        :return: The bar of this AllOfSubCategoryCategory.  # noqa: E501
        :rtype: int
        """
        return self._bar

    @bar.setter
    def bar(self, bar):
        """Sets the bar of this AllOfSubCategoryCategory.


        :param bar: The bar of this AllOfSubCategoryCategory.  # noqa: E501
        :type: int
        """

        self._bar = bar

    @property
    def beer(self):
        """Gets the beer of this AllOfSubCategoryCategory.  # noqa: E501


        :return: The beer of this AllOfSubCategoryCategory.  # noqa: E501
        :rtype: str
        """
        return self._beer

    @beer.setter
    def beer(self, beer):
        """Sets the beer of this AllOfSubCategoryCategory.


        :param beer: The beer of this AllOfSubCategoryCategory.  # noqa: E501
        :type: str
        """

        self._beer = beer

    @property
    def drunk(self):
        """Gets the drunk of this AllOfSubCategoryCategory.  # noqa: E501


        :return: The drunk of this AllOfSubCategoryCategory.  # noqa: E501
        :rtype: User
        """
        return self._drunk

    @drunk.setter
    def drunk(self, drunk):
        """Sets the drunk of this AllOfSubCategoryCategory.


        :param drunk: The drunk of this AllOfSubCategoryCategory.  # noqa: E501
        :type: User
        """

        self._drunk = drunk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllOfSubCategoryCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllOfSubCategoryCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
