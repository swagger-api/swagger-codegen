/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_

#include "SWGObject.h"

#include "SWGAmount.h"
#include "SWGApiResponse.h"
#include "SWGCategory.h"
#include "SWGCurrency.h"
#include "SWGOrder.h"
#include "SWGPet.h"
#include "SWGTag.h"
#include "SWGUser.h"

namespace Swagger {

  inline void* create(QString type) {
    if(QString("SWGAmount").compare(type) == 0) {
      return new SWGAmount();
    }
    if(QString("SWGApiResponse").compare(type) == 0) {
      return new SWGApiResponse();
    }
    if(QString("SWGCategory").compare(type) == 0) {
      return new SWGCategory();
    }
    if(QString("SWGCurrency").compare(type) == 0) {
      return new SWGCurrency();
    }
    if(QString("SWGOrder").compare(type) == 0) {
      return new SWGOrder();
    }
    if(QString("SWGPet").compare(type) == 0) {
      return new SWGPet();
    }
    if(QString("SWGTag").compare(type) == 0) {
      return new SWGTag();
    }
    if(QString("SWGUser").compare(type) == 0) {
      return new SWGUser();
    }
    
    return nullptr;
  }

  
  inline void create(QString json, QString type, SWGAmount** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGAmount*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGApiResponse** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGApiResponse*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGCategory** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGCategory*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGCurrency** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGCurrency*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGOrder** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGOrder*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGPet** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGPet*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGTag** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGTag*>(val->fromJson(json));
    }
  }
  
  inline void create(QString json, QString type, SWGUser** ptr ) { 
    auto val = static_cast<SWGObject*>(create(type));
    if(val != nullptr) {
      *ptr = static_cast<SWGUser*>(val->fromJson(json));
    }
  }
  

  inline void create(QString json, QString type, QString* str){
        if(type.startsWith("QString")) {
      *str = QString();
    }   
  }


}

#endif /* ModelFactory_H_ */
