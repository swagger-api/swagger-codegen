/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUser.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUser::SWGUser(QString json) {
    init();
    this->fromJson(json);
}

SWGUser::SWGUser() {
    init();
}

SWGUser::~SWGUser() {
    this->cleanup();
}

void
SWGUser::init() {
    id = 0L;
    m_id_isSet = false;
    username = new QString("");
    m_username_isSet = false;
    first_name = new QString("");
    m_first_name_isSet = false;
    last_name = new QString("");
    m_last_name_isSet = false;
    email = new QString("");
    m_email_isSet = false;
    password = new QString("");
    m_password_isSet = false;
    phone = new QString("");
    m_phone_isSet = false;
    user_status = 0;
    m_user_status_isSet = false;
}

void
SWGUser::cleanup() {


}

SWGUser*
SWGUser::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUser::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&id, pJson["id"], "qint64", "");
    m_id_isSet = pJson.contains("id");
    
    ::Swagger::setValue(username, pJson["username"], "QString");
    m_username_isSet = pJson.contains("username");
    
    ::Swagger::setValue(first_name, pJson["firstName"], "QString");
    m_first_name_isSet = pJson.contains("firstName");
    
    ::Swagger::setValue(last_name, pJson["lastName"], "QString");
    m_last_name_isSet = pJson.contains("lastName");
    
    ::Swagger::setValue(email, pJson["email"], "QString");
    m_email_isSet = pJson.contains("email");
    
    ::Swagger::setValue(password, pJson["password"], "QString");
    m_password_isSet = pJson.contains("password");
    
    ::Swagger::setValue(phone, pJson["phone"], "QString");
    m_phone_isSet = pJson.contains("phone");
    
    ::Swagger::setValue(&user_status, pJson["userStatus"], "qint32", "");
    m_user_status_isSet = pJson.contains("userStatus");
    
}

QString
SWGUser::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUser::asJsonObject() {
    QJsonObject obj;
    if(m_id_isSet){
        obj.insert("id", QJsonValue(id));
    }
    if(m_username_isSet){
        toJsonValue(QString("username"), username, obj, QString("QString"));
    }
    if(m_first_name_isSet){
        toJsonValue(QString("firstName"), first_name, obj, QString("QString"));
    }
    if(m_last_name_isSet){
        toJsonValue(QString("lastName"), last_name, obj, QString("QString"));
    }
    if(m_email_isSet){
        toJsonValue(QString("email"), email, obj, QString("QString"));
    }
    if(m_password_isSet){
        toJsonValue(QString("password"), password, obj, QString("QString"));
    }
    if(m_phone_isSet){
        toJsonValue(QString("phone"), phone, obj, QString("QString"));
    }
    if(m_user_status_isSet){
        obj.insert("userStatus", QJsonValue(user_status));
    }

    return obj;
}

qint64
SWGUser::getId() {
    return id;
}
void
SWGUser::setId(qint64 id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
SWGUser::getUsername() {
    return username;
}
void
SWGUser::setUsername(QString* username) {
    this->username = username;
    this->m_username_isSet = true;
}

QString*
SWGUser::getFirstName() {
    return first_name;
}
void
SWGUser::setFirstName(QString* first_name) {
    this->first_name = first_name;
    this->m_first_name_isSet = true;
}

QString*
SWGUser::getLastName() {
    return last_name;
}
void
SWGUser::setLastName(QString* last_name) {
    this->last_name = last_name;
    this->m_last_name_isSet = true;
}

QString*
SWGUser::getEmail() {
    return email;
}
void
SWGUser::setEmail(QString* email) {
    this->email = email;
    this->m_email_isSet = true;
}

QString*
SWGUser::getPassword() {
    return password;
}
void
SWGUser::setPassword(QString* password) {
    this->password = password;
    this->m_password_isSet = true;
}

QString*
SWGUser::getPhone() {
    return phone;
}
void
SWGUser::setPhone(QString* phone) {
    this->phone = phone;
    this->m_phone_isSet = true;
}

qint32
SWGUser::getUserStatus() {
    return user_status;
}
void
SWGUser::setUserStatus(qint32 user_status) {
    this->user_status = user_status;
    this->m_user_status_isSet = true;
}


bool
SWGUser::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_id_isSet){ isObjectUpdated = true; break;}
        if(m_username_isSet){ isObjectUpdated = true; break;}
        if(m_first_name_isSet){ isObjectUpdated = true; break;}
        if(m_last_name_isSet){ isObjectUpdated = true; break;}
        if(m_email_isSet){ isObjectUpdated = true; break;}
        if(m_password_isSet){ isObjectUpdated = true; break;}
        if(m_phone_isSet){ isObjectUpdated = true; break;}
        if(m_user_status_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

