/*
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Category;
import io.swagger.client.model.User;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import android.os.Parcelable;
import android.os.Parcel;
/**
 * AllOfSubCategoryCategory
 */


public class AllOfSubCategoryCategory extends Category implements Parcelable {
  @SerializedName("foo")
  private Boolean foo = null;

  @SerializedName("bar")
  private Integer bar = null;

  @SerializedName("beer")
  private String beer = null;

  @SerializedName("drunk")
  private User drunk = null;

  public AllOfSubCategoryCategory() {
    super();
  }
  public AllOfSubCategoryCategory foo(Boolean foo) {
    this.foo = foo;
    return this;
  }

   /**
   * Get foo
   * @return foo
  **/
  @Schema(description = "")
  public Boolean isFoo() {
    return foo;
  }

  public void setFoo(Boolean foo) {
    this.foo = foo;
  }

  public AllOfSubCategoryCategory bar(Integer bar) {
    this.bar = bar;
    return this;
  }

   /**
   * Get bar
   * @return bar
  **/
  @Schema(description = "")
  public Integer getBar() {
    return bar;
  }

  public void setBar(Integer bar) {
    this.bar = bar;
  }

  public AllOfSubCategoryCategory beer(String beer) {
    this.beer = beer;
    return this;
  }

   /**
   * Get beer
   * @return beer
  **/
  @Schema(description = "")
  public String getBeer() {
    return beer;
  }

  public void setBeer(String beer) {
    this.beer = beer;
  }

  public AllOfSubCategoryCategory drunk(User drunk) {
    this.drunk = drunk;
    return this;
  }

   /**
   * Get drunk
   * @return drunk
  **/
  @Schema(description = "")
  public User getDrunk() {
    return drunk;
  }

  public void setDrunk(User drunk) {
    this.drunk = drunk;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllOfSubCategoryCategory allOfSubCategoryCategory = (AllOfSubCategoryCategory) o;
    return Objects.equals(this.foo, allOfSubCategoryCategory.foo) &&
        Objects.equals(this.bar, allOfSubCategoryCategory.bar) &&
        Objects.equals(this.beer, allOfSubCategoryCategory.beer) &&
        Objects.equals(this.drunk, allOfSubCategoryCategory.drunk) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(foo, bar, beer, drunk, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllOfSubCategoryCategory {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    foo: ").append(toIndentedString(foo)).append("\n");
    sb.append("    bar: ").append(toIndentedString(bar)).append("\n");
    sb.append("    beer: ").append(toIndentedString(beer)).append("\n");
    sb.append("    drunk: ").append(toIndentedString(drunk)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public void writeToParcel(Parcel out, int flags) {
    super.writeToParcel(out, flags);
    out.writeValue(foo);
    out.writeValue(bar);
    out.writeValue(beer);
    out.writeValue(drunk);
  }

  AllOfSubCategoryCategory(Parcel in) {
    super(in);
    foo = (Boolean)in.readValue(null);
    bar = (Integer)in.readValue(null);
    beer = (String)in.readValue(null);
    drunk = (User)in.readValue(User.class.getClassLoader());
  }

  public int describeContents() {
    return 0;
  }

  public static final Parcelable.Creator<AllOfSubCategoryCategory> CREATOR = new Parcelable.Creator<AllOfSubCategoryCategory>() {
    public AllOfSubCategoryCategory createFromParcel(Parcel in) {
      return new AllOfSubCategoryCategory(in);
    }
    public AllOfSubCategoryCategory[] newArray(int size) {
      return new AllOfSubCategoryCategory[size];
    }
  };
}
