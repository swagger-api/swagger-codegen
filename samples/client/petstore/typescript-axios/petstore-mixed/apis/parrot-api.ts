/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Body8 } from '../models';
import { Body9 } from '../models';
import { InlineResponse200 } from '../models';
import { InlineResponse2001 } from '../models';
import { InlineResponseItems200 } from '../models';
/**
 * ParrotApi - axios parameter creator
 * @export
 */
export const ParrotApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {Body9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParrot: async (body?: Body9, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/parrot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParrots: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/parrot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update parrots
         * @param {Body8} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParrots: async (body?: Body8, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/parrot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParrotApi - functional programming interface
 * @export
 */
export const ParrotApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {Body9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addParrot(body?: Body9, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await ParrotApiAxiosParamCreator(configuration).addParrot(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParrots(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponseItems200>>> {
            const localVarAxiosArgs = await ParrotApiAxiosParamCreator(configuration).getParrots(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update parrots
         * @param {Body8} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateParrots(body?: Body8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await ParrotApiAxiosParamCreator(configuration).updateParrots(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ParrotApi - factory interface
 * @export
 */
export const ParrotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a new parrow to the store
         * @param {Body9} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addParrot(body?: Body9, options?: any): AxiosPromise<InlineResponse2001> {
            return ParrotApiFp(configuration).addParrot(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get Parrots
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParrots(options?: any): AxiosPromise<Array<InlineResponseItems200>> {
            return ParrotApiFp(configuration).getParrots(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update parrots
         * @param {Body8} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateParrots(body?: Body8, options?: any): AxiosPromise<InlineResponse200> {
            return ParrotApiFp(configuration).updateParrots(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ParrotApi - object-oriented interface
 * @export
 * @class ParrotApi
 * @extends {BaseAPI}
 */
export class ParrotApi extends BaseAPI {
    /**
     * 
     * @summary Add a new parrow to the store
     * @param {Body9} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public addParrot(body?: Body9, options?: any) {
        return ParrotApiFp(this.configuration).addParrot(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary get Parrots
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public getParrots(options?: any) {
        return ParrotApiFp(this.configuration).getParrots(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary update parrots
     * @param {Body8} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParrotApi
     */
    public updateParrots(body?: Body8, options?: any) {
        return ParrotApiFp(this.configuration).updateParrots(body, options).then((request) => request(this.axios, this.basePath));
    }
}
