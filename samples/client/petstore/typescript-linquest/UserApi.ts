/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { IAjaxProvider } from 'jinqu';
import { LinqService, QueryOptions } from 'linquest';
import {
  User,
} from './models';

/**
 * createUser - parameters interface
 */
export interface ICreateUserParams {
  body: User;
}

/**
 * createUsersWithArrayInput - parameters interface
 */
export interface ICreateUsersWithArrayInputParams {
  body: Array<User>;
}

/**
 * createUsersWithListInput - parameters interface
 */
export interface ICreateUsersWithListInputParams {
  body: Array<User>;
}

/**
 * deleteUser - parameters interface
 */
export interface IDeleteUserParams {
  username: string;
}

/**
 * getUserByName - parameters interface
 */
export interface IGetUserByNameParams {
  username: string;
}

/**
 * loginUser - parameters interface
 */
export interface ILoginUserParams {
  username: string;
  password: string;
}

/**
 * logoutUser - parameters interface
 */
export interface ILogoutUserParams {
}

/**
 * updateUser - parameters interface
 */
export interface IUpdateUserParams {
  username: string;
  body: User;
}

/**
 * UserApi - API class
 */
export class UserApi extends LinqService {

  /**
   * Creates a new UserApi class.
   *
   * @param ajaxProvider The Linquest Ajax Provider to inject. When not specified, default Fetch provider will be used.
   */
  constructor(ajaxProvider?: IAjaxProvider) {
    super('https://petstore.swagger.io/v2', ajaxProvider);
  }

  /**
   * Create user
   * This can only be done by the logged in user.
   * @param params.body Created user object
   */
  createUser(params: ICreateUserParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user`;

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Creates list of users with given input array
   * 
   * @param params.body List of user object
   */
  createUsersWithArrayInput(params: ICreateUsersWithArrayInputParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/createWithArray`;

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Creates list of users with given input array
   * 
   * @param params.body List of user object
   */
  createUsersWithListInput(params: ICreateUsersWithListInputParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/createWithList`;

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Delete user
   * This can only be done by the logged in user.
   * @param params.username The name that needs to be deleted
   */
  deleteUser(params: IDeleteUserParams) {
    // Create query
    const options: QueryOptions = {
      method: 'DELETE',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/{username}`
      .replace(`username`, encodeURIComponent(params.username ? params.username.toString() : ''));

    let query = this.createQuery<any>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Get user by user name
   * 
   * @param params.username The name that needs to be fetched. Use user1 for testing. 
   */
  getUserByName(params: IGetUserByNameParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/{username}`
      .replace(`username`, encodeURIComponent(params.username ? params.username.toString() : ''));

    let query = this.createQuery<User>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Logs user into the system
   * 
   * @param params.username The user name for login
   * @param params.password The password for login in clear text
   */
  loginUser(params: ILoginUserParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/login`;

    let query = this.createQuery<string>(url);
    // Set query parameters
    options.params.push({ key: 'username', value: params.username && params.username.toString() });
    // Set query parameters
    options.params.push({ key: 'password', value: params.password && params.password.toString() });
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Logs out current logged in user session
   * 
   */
  logoutUser() {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/logout`;

    let query = this.createQuery<any>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Updated user
   * This can only be done by the logged in user.
   * @param params.username name that need to be updated
   * @param params.body Updated user object
   */
  updateUser(params: IUpdateUserParams) {
    // Create query
    const options: QueryOptions = {
      method: 'PUT',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/user/{username}`
      .replace(`username`, encodeURIComponent(params.username ? params.username.toString() : ''));

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }
}
