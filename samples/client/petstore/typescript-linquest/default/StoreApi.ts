/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { IAjaxProvider } from 'jinqu';
import { LinqService, QueryOptions } from 'linquest';
import {
  Order,
} from './models';

/**
 * StoreApi - API class
 */
export class StoreApi extends LinqService {

  /**
   * Creates a new StoreApi class.
   *
   * @param ajaxProvider The Linquest Ajax Provider to inject. When not specified, default Fetch provider will be used.
   */
  constructor(ajaxProvider?: IAjaxProvider) {
    super('http://petstore.swagger.io/v2', ajaxProvider);
  }

  /**
   * Delete purchase order by ID
   * For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
   * @param orderId ID of the order that needs to be deleted
   */
  deleteOrder(orderId: string, options?: QueryOptions) {
    // create query
    const url = `/store/order/{orderId}`
        .replace('{orderId}', encodeURIComponent(orderId.toString()));
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'DELETE';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Returns pet inventories by status
   * Returns a map of status codes to quantities
   */
  getInventory(options?: QueryOptions) {
    // create query
    const url = `/store/inventory`;
    let query = this.createQuery<{ [key: string]: number; }>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'GET';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.toArrayAsync();
  }

  /**
   * Find purchase order by ID
   * For valid response try integer IDs with value &lt;&#x3D; 5 or &gt; 10. Other values will generated exceptions
   * @param orderId ID of pet that needs to be fetched
   */
  getOrderById(orderId: number, options?: QueryOptions) {
    // create query
    const url = `/store/order/{orderId}`
        .replace('{orderId}', encodeURIComponent(orderId.toString()));
    let query = this.createQuery<Order>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'GET';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Place an order for a pet
   * 
   * @param body order placed for purchasing the pet
   */
  placeOrder(body: Order, options?: QueryOptions) {
    // create query
    const url = `/store/order`;
    let query = this.createQuery<Order>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'POST';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set body parameter
    options.data = body;
    query = query.withOptions(options);

    return query.firstAsync();
  }
}
