/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { IAjaxProvider } from 'jinqu';
import { LinqService, QueryOptions } from 'linquest';
import {
  User,
} from './models';

/**
 * UserApi - API class
 */
export class UserApi extends LinqService {

  /**
   * Creates a new UserApi class.
   *
   * @param ajaxProvider The Linquest Ajax Provider to inject. When not specified, default Fetch provider will be used.
   */
  constructor(ajaxProvider?: IAjaxProvider) {
    super('http://petstore.swagger.io/v2', ajaxProvider);
  }

  /**
   * Create user
   * This can only be done by the logged in user.
   * @param body Created user object
   */
  createUser(body: User, options?: QueryOptions) {
    // create query
    const url = `/user`;
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'POST';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set body parameter
    options.data = body;
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Creates list of users with given input array
   * 
   * @param body List of user object
   */
  createUsersWithArrayInput(body: Array<User>, options?: QueryOptions) {
    // create query
    const url = `/user/createWithArray`;
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'POST';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set body parameter
    options.data = body;
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Creates list of users with given input array
   * 
   * @param body List of user object
   */
  createUsersWithListInput(body: Array<User>, options?: QueryOptions) {
    // create query
    const url = `/user/createWithList`;
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'POST';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set body parameter
    options.data = body;
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Delete user
   * This can only be done by the logged in user.
   * @param username The name that needs to be deleted
   */
  deleteUser(username: string, options?: QueryOptions) {
    // create query
    const url = `/user/{username}`
        .replace('{username}', encodeURIComponent(username.toString()));
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'DELETE';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Get user by user name
   * 
   * @param username The name that needs to be fetched. Use user1 for testing.
   */
  getUserByName(username: string, options?: QueryOptions) {
    // create query
    const url = `/user/{username}`
        .replace('{username}', encodeURIComponent(username.toString()));
    let query = this.createQuery<User>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'GET';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Logs user into the system
   * 
   * @param username The user name for login
   * @param password The password for login in clear text
   */
  loginUser(username: string, password: string, options?: QueryOptions) {
    // create query
    const url = `/user/login`;
    let query = this.createQuery<string>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'GET';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set query parameters
    options.params.push({ key: 'username', value: username && username.toString() });
    // set query parameters
    options.params.push({ key: 'password', value: password && password.toString() });
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Logs out current logged in user session
   * 
   */
  logoutUser(options?: QueryOptions) {
    // create query
    const url = `/user/logout`;
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'GET';
    options.params = options.params || [];
    options.headers = options.headers || {};

    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Updated user
   * This can only be done by the logged in user.
   * @param username name that need to be deleted
   * @param body Updated user object
   */
  updateUser(username: string, body: User, options?: QueryOptions) {
    // create query
    const url = `/user/{username}`
        .replace('{username}', encodeURIComponent(username.toString()));
    let query = this.createQuery<any>(url);

    // initialize options
    options = options || {};
    options.method = options.method || 'PUT';
    options.params = options.params || [];
    options.headers = options.headers || {};

    // set body parameter
    options.data = body;
    query = query.withOptions(options);

    return query.firstAsync();
  }
}
