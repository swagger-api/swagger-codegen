/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { IAjaxProvider } from 'jinqu';
import { LinqService, QueryOptions } from 'linquest';
import {
  Order,
} from './models';

/**
 * deleteOrder - parameters interface
 */
export interface IDeleteOrderParams {
  orderId: number;
}

/**
 * getInventory - parameters interface
 */
export interface IGetInventoryParams {
}

/**
 * getOrderById - parameters interface
 */
export interface IGetOrderByIdParams {
  orderId: number;
}

/**
 * placeOrder - parameters interface
 */
export interface IPlaceOrderParams {
  body: Order;
}

/**
 * StoreApi - API class
 */
export class StoreApi extends LinqService {

  /**
   * Creates a new StoreApi class.
   *
   * @param ajaxProvider The Linquest Ajax Provider to inject. When not specified, default Fetch provider will be used.
   */
  constructor(ajaxProvider?: IAjaxProvider) {
    super('https://petstore.swagger.io/v2', ajaxProvider);
  }

  /**
   * Delete purchase order by ID
   * For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
   * @param params.orderId ID of the order that needs to be deleted
   */
  deleteOrder(params: IDeleteOrderParams) {
    // Create query
    const options: QueryOptions = {
      method: 'DELETE',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/store/order/{orderId}`
      .replace(`orderId`, encodeURIComponent(params.orderId ? params.orderId.toString() : ''));

    let query = this.createQuery<any>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Returns pet inventories by status
   * Returns a map of status codes to quantities
   */
  getInventory() {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/store/inventory`;

    let query = this.createQuery<{ [key: string]: number; }>(url);
    // Set headers
    query = query.withOptions(options);

    return query.toArrayAsync();
  }

  /**
   * Find purchase order by ID
   * For valid response try integer IDs with value &gt;&#x3D; 1 and &lt;&#x3D; 10. Other values will generated exceptions
   * @param params.orderId ID of pet that needs to be fetched
   */
  getOrderById(params: IGetOrderByIdParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/store/order/{orderId}`
      .replace(`orderId`, encodeURIComponent(params.orderId ? params.orderId.toString() : ''));

    let query = this.createQuery<Order>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Place an order for a pet
   * 
   * @param params.body order placed for purchasing the pet
   */
  placeOrder(params: IPlaceOrderParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/store/order`;

    let query = this.createQuery<Order>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }
}
