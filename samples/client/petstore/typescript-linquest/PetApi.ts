/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { IAjaxProvider } from 'jinqu';
import { LinqService, QueryOptions } from 'linquest';
import {
  Pet,
  ApiResponse,
} from './models';

/**
 * addPet - parameters interface
 */
export interface IAddPetParams {
  body: Pet;
}

/**
 * deletePet - parameters interface
 */
export interface IDeletePetParams {
  petId: number;
  apiKey?: string;
}

/**
 * findPetsByStatus - parameters interface
 */
export interface IFindPetsByStatusParams {
  status: Array<'available' | 'pending' | 'sold'>;
}

/**
 * findPetsByTags - parameters interface
 */
export interface IFindPetsByTagsParams {
  tags: Array<string>;
}

/**
 * getPetById - parameters interface
 */
export interface IGetPetByIdParams {
  petId: number;
}

/**
 * updatePet - parameters interface
 */
export interface IUpdatePetParams {
  body: Pet;
}

/**
 * updatePetWithForm - parameters interface
 */
export interface IUpdatePetWithFormParams {
  petId: number;
  name?: string;
  status?: string;
}

/**
 * uploadFile - parameters interface
 */
export interface IUploadFileParams {
  petId: number;
  additionalMetadata?: string;
  file?: any;
}

/**
 * PetApi - API class
 */
export class PetApi extends LinqService {

  /**
   * Creates a new PetApi class.
   *
   * @param ajaxProvider The Linquest Ajax Provider to inject. When not specified, default Fetch provider will be used.
   */
  constructor(ajaxProvider?: IAjaxProvider) {
    super('https://petstore.swagger.io/v2', ajaxProvider);
  }

  /**
   * Add a new pet to the store
   * 
   * @param params.body Pet object that needs to be added to the store
   */
  addPet(params: IAddPetParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet`;

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Deletes a pet
   * 
   * @param params.petId Pet id to delete
   * @param params.apiKey 
   */
  deletePet(params: IDeletePetParams) {
    // Create query
    const options: QueryOptions = {
      method: 'DELETE',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/{petId}`
      .replace(`petId`, encodeURIComponent(params.petId ? params.petId.toString() : ''));

    let query = this.createQuery<any>(url);
    // Set headers
    options.headers['api_key'] = (<any>params)['apiKey'] && (<any>params)['apiKey'].toString();
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Finds Pets by status
   * Multiple status values can be provided with comma separated strings
   * @param params.status Status values that need to be considered for filter
   */
  findPetsByStatus(params: IFindPetsByStatusParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/findByStatus`;

    let query = this.createQuery<Pet>(url);
    // Set query parameters
    options.params.push({ key: 'status', value: params.status && params.status.toString() });
    // Set headers
    query = query.withOptions(options);

    return query;
  }

  /**
   * Finds Pets by tags
   * Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * @param params.tags Tags to filter by
   */
  findPetsByTags(params: IFindPetsByTagsParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/findByTags`;

    let query = this.createQuery<Pet>(url);
    // Set query parameters
    options.params.push({ key: 'tags', value: params.tags && params.tags.toString() });
    // Set headers
    query = query.withOptions(options);

    return query;
  }

  /**
   * Find pet by ID
   * Returns a single pet
   * @param params.petId ID of pet to return
   */
  getPetById(params: IGetPetByIdParams) {
    // Create query
    const options: QueryOptions = {
      method: 'GET',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/{petId}`
      .replace(`petId`, encodeURIComponent(params.petId ? params.petId.toString() : ''));

    let query = this.createQuery<Pet>(url);
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Update an existing pet
   * 
   * @param params.body Pet object that needs to be added to the store
   */
  updatePet(params: IUpdatePetParams) {
    // Create query
    const options: QueryOptions = {
      method: 'PUT',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet`;

    let query = this.createQuery<any>(url);
    // Encode body parameter
    options.data = params.body || {};
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * Updates a pet in the store with form data
   * 
   * @param params.petId ID of pet that needs to be updated
   * @param params.name Updated name of the pet
   * @param params.status Updated status of the pet
   */
  updatePetWithForm(params: IUpdatePetWithFormParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/{petId}`
      .replace(`petId`, encodeURIComponent(params.petId ? params.petId.toString() : ''));

    let query = this.createQuery<any>(url);
    // Encode form parameters
    options.data['name'] = params.name;
    // Encode form parameters
    options.data['status'] = params.status;
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }

  /**
   * uploads an image
   * 
   * @param params.petId ID of pet to update
   * @param params.additionalMetadata Additional data to pass to server
   * @param params.file file to upload
   */
  uploadFile(params: IUploadFileParams) {
    // Create query
    const options: QueryOptions = {
      method: 'POST',
      params: [],
      headers: {},
      data: {}
    };

    const url = `/pet/{petId}/uploadImage`
      .replace(`petId`, encodeURIComponent(params.petId ? params.petId.toString() : ''));

    let query = this.createQuery<ApiResponse>(url);
    // Encode form parameters
    options.data['additionalMetadata'] = params.additionalMetadata;
    // Encode form parameters
    options.data['file'] = params.file;
    // Set headers
    query = query.withOptions(options);

    return query.firstAsync();
  }
}
