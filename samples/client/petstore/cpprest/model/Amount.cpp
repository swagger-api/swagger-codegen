/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.11-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Amount.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Amount::Amount()
{
    m_Value = 0.0;
}

Amount::~Amount()
{
}

void Amount::validate()
{
    // TODO: implement validation
}

web::json::value Amount::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    val[utility::conversions::to_string_t("currency")] = ModelBase::toJson(m_Currency);

    return val;
}

void Amount::fromJson(web::json::value& val)
{
    setValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("value")]));
    std::shared_ptr<Currency> newCurrency(new Currency());
    newCurrency->fromJson(val[utility::conversions::to_string_t("currency")]);
    setCurrency( newCurrency );
}

void Amount::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    m_Currency->toMultipart(multipart, utility::conversions::to_string_t("currency."));
}

void Amount::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    std::shared_ptr<Currency> newCurrency(new Currency());
    newCurrency->fromMultiPart(multipart, utility::conversions::to_string_t("currency."));
    setCurrency( newCurrency );
}

double Amount::getValue() const
{
    return m_Value;
}


void Amount::setValue(double value)
{
    m_Value = value;
    
}
std::shared_ptr<Currency> Amount::getCurrency() const
{
    return m_Currency;
}


void Amount::setCurrency(std::shared_ptr<Currency> value)
{
    m_Currency = value;
    
}
}
}
}
}

