/**
 * Swagger Petstore
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AnimalApi", () => {
  let instance: api.AnimalApi
  beforeEach(function() {
    instance = new api.AnimalApi(config)
  });

  test("addAnimal", () => {
    const body: api.Animal = undefined
    return expect(instance.addAnimal(body, {})).resolves.toBe(null)
  })
  test("deleteAnimal", () => {
    const animalId: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deleteAnimal(animalId, apiKey, {})).resolves.toBe(null)
  })
  test("getAnimalById", () => {
    const animalId: number = 789
    return expect(instance.getAnimalById(animalId, {})).resolves.toBe(null)
  })
  test("updateAnimal", () => {
    const body: api.Animal = undefined
    return expect(instance.updateAnimal(body, {})).resolves.toBe(null)
  })
  test("updateAnimalWithForm", () => {
    const animalId: number = 789
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.updateAnimalWithForm(animalId, name, status, {})).resolves.toBe(null)
  })
})

describe("AnotherFakeApi", () => {
  let instance: api.AnotherFakeApi
  beforeEach(function() {
    instance = new api.AnotherFakeApi(config)
  });

  test("testSpecialTags", () => {
    const body: api.Client = undefined
    return expect(instance.testSpecialTags(body, {})).resolves.toBe(null)
  })
})

describe("DogApi", () => {
  let instance: api.DogApi
  beforeEach(function() {
    instance = new api.DogApi(config)
  });

  test("addDog", () => {
    const body: api.Dog = undefined
    return expect(instance.addDog(body, {})).resolves.toBe(null)
  })
  test("deleteDog", () => {
    const dogId: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deleteDog(dogId, apiKey, {})).resolves.toBe(null)
  })
  test("getDogById", () => {
    const dogId: number = 789
    return expect(instance.getDogById(dogId, {})).resolves.toBe(null)
  })
  test("updateDog", () => {
    const body: api.Dog = undefined
    return expect(instance.updateDog(body, {})).resolves.toBe(null)
  })
  test("updateDogWithForm", () => {
    const dogId: number = 789
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.updateDogWithForm(dogId, name, status, {})).resolves.toBe(null)
  })
})

describe("FakeApi", () => {
  let instance: api.FakeApi
  beforeEach(function() {
    instance = new api.FakeApi(config)
  });

  test("fakeOuterBooleanSerialize", () => {
    const body: boolean = undefined
    return expect(instance.fakeOuterBooleanSerialize(body, {})).resolves.toBe(null)
  })
  test("fakeOuterCompositeSerialize", () => {
    const body: api.OuterComposite = undefined
    return expect(instance.fakeOuterCompositeSerialize(body, {})).resolves.toBe(null)
  })
  test("fakeOuterNumberSerialize", () => {
    const body: number = undefined
    return expect(instance.fakeOuterNumberSerialize(body, {})).resolves.toBe(null)
  })
  test("fakeOuterStringSerialize", () => {
    const body: string = undefined
    return expect(instance.fakeOuterStringSerialize(body, {})).resolves.toBe(null)
  })
  test("testClientModel", () => {
    const body: api.Client = undefined
    return expect(instance.testClientModel(body, {})).resolves.toBe(null)
  })
  test("testEndpointParameters", () => {
    const body: api.Body2 = undefined
    return expect(instance.testEndpointParameters(body, {})).resolves.toBe(null)
  })
  test("testEnumParameters", () => {
    const enumHeaderStringArray: Array<string> = undefined
    const enumHeaderString: string = "enumHeaderString_example"
    const enumQueryStringArray: Array<string> = undefined
    const enumQueryString: string = "enumQueryString_example"
    const enumQueryInteger: number = 56
    return expect(instance.testEnumParameters(enumHeaderStringArray, enumHeaderString, enumQueryStringArray, enumQueryString, enumQueryInteger, {})).resolves.toBe(null)
  })
  test("testEnumRequestBody", () => {
    const body: api.Body4 = undefined
    return expect(instance.testEnumRequestBody(body, {})).resolves.toBe(null)
  })
  test("testInlineAdditionalProperties", () => {
    const body: { [key: string]: string; } = undefined
    return expect(instance.testInlineAdditionalProperties(body, {})).resolves.toBe(null)
  })
  test("testJsonFormData", () => {
    const body: api.Body5 = undefined
    return expect(instance.testJsonFormData(body, {})).resolves.toBe(null)
  })
})

describe("FakeClassnameTags123Api", () => {
  let instance: api.FakeClassnameTags123Api
  beforeEach(function() {
    instance = new api.FakeClassnameTags123Api(config)
  });

  test("testClassname", () => {
    const body: api.Client = undefined
    return expect(instance.testClassname(body, {})).resolves.toBe(null)
  })
})

describe("MasterApi", () => {
  let instance: api.MasterApi
  beforeEach(function() {
    instance = new api.MasterApi(config)
  });

  test("masterOperation", () => {
    return expect(instance.masterOperation({})).resolves.toBe(null)
  })
})

describe("ParrotApi", () => {
  let instance: api.ParrotApi
  beforeEach(function() {
    instance = new api.ParrotApi(config)
  });

  test("addParrot", () => {
    const body: api.Body9 = undefined
    return expect(instance.addParrot(body, {})).resolves.toBe(null)
  })
  test("getParrots", () => {
    return expect(instance.getParrots({})).resolves.toBe(null)
  })
  test("updateParrots", () => {
    const body: api.Body8 = undefined
    return expect(instance.updateParrots(body, {})).resolves.toBe(null)
  })
})

describe("PetApi", () => {
  let instance: api.PetApi
  beforeEach(function() {
    instance = new api.PetApi(config)
  });

  test("addPet", () => {
    const body: api.Pet = undefined
    return expect(instance.addPet(body, {})).resolves.toBe(null)
  })
  test("deletePet", () => {
    const petId: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deletePet(petId, apiKey, {})).resolves.toBe(null)
  })
  test("doCategoryStuff", () => {
    const body: api.SubCategory = undefined
    return expect(instance.doCategoryStuff(body, {})).resolves.toBe(null)
  })
  test("findPetsByStatus", () => {
    const status: Array<string> = undefined
    return expect(instance.findPetsByStatus(status, {})).resolves.toBe(null)
  })
  test("findPetsByTags", () => {
    const tags: Array<string> = undefined
    return expect(instance.findPetsByTags(tags, {})).resolves.toBe(null)
  })
  test("getAllPets", () => {
    return expect(instance.getAllPets({})).resolves.toBe(null)
  })
  test("getPetById", () => {
    const petId: number = 789
    return expect(instance.getPetById(petId, {})).resolves.toBe(null)
  })
  test("getRandomPet", () => {
    return expect(instance.getRandomPet({})).resolves.toBe(null)
  })
  test("updatePet", () => {
    const body: api.Pet = undefined
    return expect(instance.updatePet(body, {})).resolves.toBe(null)
  })
  test("updatePetWithForm", () => {
    const petId: number = 789
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.updatePetWithForm(petId, name, status, {})).resolves.toBe(null)
  })
  test("uploadFile", () => {
    const petId: number = 789
    const additionalMetadata: string = "additionalMetadata_example"
    const file: Blob = "file_example"
    return expect(instance.uploadFile(petId, additionalMetadata, file, {})).resolves.toBe(null)
  })
})

describe("StoreApi", () => {
  let instance: api.StoreApi
  beforeEach(function() {
    instance = new api.StoreApi(config)
  });

  test("deleteOrder", () => {
    const orderId: string = "orderId_example"
    return expect(instance.deleteOrder(orderId, {})).resolves.toBe(null)
  })
  test("getInventory", () => {
    return expect(instance.getInventory({})).resolves.toBe(null)
  })
  test("getOrderById", () => {
    const orderId: number = 789
    return expect(instance.getOrderById(orderId, {})).resolves.toBe(null)
  })
  test("placeOrder", () => {
    const body: api.Order = undefined
    return expect(instance.placeOrder(body, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("createUser", () => {
    const body: api.User = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("createUsersWithArrayInput", () => {
    const body: Array<api.User> = undefined
    return expect(instance.createUsersWithArrayInput(body, {})).resolves.toBe(null)
  })
  test("createUsersWithListInput", () => {
    const body: Array<api.User> = undefined
    return expect(instance.createUsersWithListInput(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const username: string = "username_example"
    return expect(instance.deleteUser(username, {})).resolves.toBe(null)
  })
  test("getUserByName", () => {
    const username: string = "username_example"
    return expect(instance.getUserByName(username, {})).resolves.toBe(null)
  })
  test("loginUser", () => {
    const username: string = "username_example"
    const password: string = "password_example"
    return expect(instance.loginUser(username, password, {})).resolves.toBe(null)
  })
  test("logoutUser", () => {
    return expect(instance.logoutUser({})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.User = undefined
    const username: string = "username_example"
    return expect(instance.updateUser(body, username, {})).resolves.toBe(null)
  })
})

