/* 
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SubCategory
    /// </summary>
    [DataContract]
        public partial class SubCategory :  IEquatable<SubCategory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubCategory" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="category2">category2.</param>
        /// <param name="pets">pets.</param>
        public SubCategory(AllOfSubCategoryCategory category = default(AllOfSubCategoryCategory), Category category2 = default(Category), List<AllOfSubCategoryPetsItems> pets = default(List<AllOfSubCategoryPetsItems>))
        {
            this.Category = category;
            this.Category2 = category2;
            this.Pets = pets;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public AllOfSubCategoryCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Category2
        /// </summary>
        [DataMember(Name="category2", EmitDefaultValue=false)]
        public Category Category2 { get; set; }

        /// <summary>
        /// Gets or Sets Pets
        /// </summary>
        [DataMember(Name="pets", EmitDefaultValue=false)]
        public List<AllOfSubCategoryPetsItems> Pets { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubCategory {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Category2: ").Append(Category2).Append("\n");
            sb.Append("  Pets: ").Append(Pets).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubCategory);
        }

        /// <summary>
        /// Returns true if SubCategory instances are equal
        /// </summary>
        /// <param name="input">Instance of SubCategory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubCategory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Category2 == input.Category2 ||
                    (this.Category2 != null &&
                    this.Category2.Equals(input.Category2))
                ) && 
                (
                    this.Pets == input.Pets ||
                    this.Pets != null &&
                    input.Pets != null &&
                    this.Pets.SequenceEqual(input.Pets)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Category2 != null)
                    hashCode = hashCode * 59 + this.Category2.GetHashCode();
                if (this.Pets != null)
                    hashCode = hashCode * 59 + this.Pets.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
