/* 
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body5
    /// </summary>
    [DataContract]
        public partial class Body5 :  IEquatable<Body5>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body5" /> class.
        /// </summary>
        /// <param name="param">field1 (required).</param>
        /// <param name="param2">field2 (required).</param>
        public Body5(string param = default(string), string param2 = default(string))
        {
            // to ensure "param" is required (not null)
            if (param == null)
            {
                throw new InvalidDataException("param is a required property for Body5 and cannot be null");
            }
            else
            {
                this.Param = param;
            }
            // to ensure "param2" is required (not null)
            if (param2 == null)
            {
                throw new InvalidDataException("param2 is a required property for Body5 and cannot be null");
            }
            else
            {
                this.Param2 = param2;
            }
        }
        
        /// <summary>
        /// field1
        /// </summary>
        /// <value>field1</value>
        [DataMember(Name="param", EmitDefaultValue=false)]
        public string Param { get; set; }

        /// <summary>
        /// field2
        /// </summary>
        /// <value>field2</value>
        [DataMember(Name="param2", EmitDefaultValue=false)]
        public string Param2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body5 {\n");
            sb.Append("  Param: ").Append(Param).Append("\n");
            sb.Append("  Param2: ").Append(Param2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body5);
        }

        /// <summary>
        /// Returns true if Body5 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body5 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body5 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Param == input.Param ||
                    (this.Param != null &&
                    this.Param.Equals(input.Param))
                ) && 
                (
                    this.Param2 == input.Param2 ||
                    (this.Param2 != null &&
                    this.Param2.Equals(input.Param2))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Param != null)
                    hashCode = hashCode * 59 + this.Param.GetHashCode();
                if (this.Param2 != null)
                    hashCode = hashCode * 59 + this.Param2.GetHashCode();
                return hashCode;
            }
        }

    }
}
