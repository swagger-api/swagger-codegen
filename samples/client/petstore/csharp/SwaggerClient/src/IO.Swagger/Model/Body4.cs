/* 
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Body4
    /// </summary>
    [DataContract]
        public partial class Body4 :  IEquatable<Body4>, IValidatableObject
    {
        /// <summary>
        /// Defines EnumFormStringArray
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EnumFormStringArrayEnum
        {
            /// <summary>
            /// Enum GreaterThan for value: >
            /// </summary>
            [EnumMember(Value = ">")]
            GreaterThan = 1,
            /// <summary>
            /// Enum Dollar for value: $
            /// </summary>
            [EnumMember(Value = "$")]
            Dollar = 2        }
        /// <summary>
        /// Form parameter enum test (string array)
        /// </summary>
        /// <value>Form parameter enum test (string array)</value>
        [DataMember(Name="enum_form_string_array", EmitDefaultValue=false)]
        public List<EnumFormStringArrayEnum> EnumFormStringArray { get; set; }
        /// <summary>
        /// Form parameter enum test (string)
        /// </summary>
        /// <value>Form parameter enum test (string)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EnumFormStringEnum
        {
            /// <summary>
            /// Enum Abc for value: _abc
            /// </summary>
            [EnumMember(Value = "_abc")]
            Abc = 1,
            /// <summary>
            /// Enum Efg for value: -efg
            /// </summary>
            [EnumMember(Value = "-efg")]
            Efg = 2,
            /// <summary>
            /// Enum Xyz for value: (xyz)
            /// </summary>
            [EnumMember(Value = "(xyz)")]
            Xyz = 3        }
        /// <summary>
        /// Form parameter enum test (string)
        /// </summary>
        /// <value>Form parameter enum test (string)</value>
        [DataMember(Name="enum_form_string", EmitDefaultValue=false)]
        public EnumFormStringEnum? EnumFormString { get; set; }
        /// <summary>
        /// Query parameter enum test (double)
        /// </summary>
        /// <value>Query parameter enum test (double)</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EnumQueryDoubleEnum
        {
            /// <summary>
            /// Enum NUMBER_1_DOT_1 for value: 1.1
            /// </summary>
            [EnumMember(Value = "1.1")]
            NUMBER_1_DOT_1 = 1,
            /// <summary>
            /// Enum NUMBER_MINUS_1_DOT_2 for value: -1.2
            /// </summary>
            [EnumMember(Value = "-1.2")]
            NUMBER_MINUS_1_DOT_2 = 2        }
        /// <summary>
        /// Query parameter enum test (double)
        /// </summary>
        /// <value>Query parameter enum test (double)</value>
        [DataMember(Name="enum_query_double", EmitDefaultValue=false)]
        public EnumQueryDoubleEnum? EnumQueryDouble { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body4" /> class.
        /// </summary>
        /// <param name="enumFormStringArray">Form parameter enum test (string array).</param>
        /// <param name="enumFormString">Form parameter enum test (string) (default to EnumFormStringEnum.Efg).</param>
        /// <param name="enumQueryDouble">Query parameter enum test (double).</param>
        public Body4(List<EnumFormStringArrayEnum> enumFormStringArray = default(List<EnumFormStringArrayEnum>), EnumFormStringEnum? enumFormString = EnumFormStringEnum.Efg, EnumQueryDoubleEnum? enumQueryDouble = default(EnumQueryDoubleEnum?))
        {
            this.EnumFormStringArray = enumFormStringArray;
            // use default value if no "enumFormString" provided
            if (enumFormString == null)
            {
                this.EnumFormString = EnumFormStringEnum.Efg;
            }
            else
            {
                this.EnumFormString = enumFormString;
            }
            this.EnumQueryDouble = enumQueryDouble;
        }
        



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body4 {\n");
            sb.Append("  EnumFormStringArray: ").Append(EnumFormStringArray).Append("\n");
            sb.Append("  EnumFormString: ").Append(EnumFormString).Append("\n");
            sb.Append("  EnumQueryDouble: ").Append(EnumQueryDouble).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body4);
        }

        /// <summary>
        /// Returns true if Body4 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body4 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnumFormStringArray == input.EnumFormStringArray ||
                    this.EnumFormStringArray != null &&
                    input.EnumFormStringArray != null &&
                    this.EnumFormStringArray.SequenceEqual(input.EnumFormStringArray)
                ) && 
                (
                    this.EnumFormString == input.EnumFormString ||
                    (this.EnumFormString != null &&
                    this.EnumFormString.Equals(input.EnumFormString))
                ) && 
                (
                    this.EnumQueryDouble == input.EnumQueryDouble ||
                    (this.EnumQueryDouble != null &&
                    this.EnumQueryDouble.Equals(input.EnumQueryDouble))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EnumFormStringArray != null)
                    hashCode = hashCode * 59 + this.EnumFormStringArray.GetHashCode();
                if (this.EnumFormString != null)
                    hashCode = hashCode * 59 + this.EnumFormString.GetHashCode();
                if (this.EnumQueryDouble != null)
                    hashCode = hashCode * 59 + this.EnumQueryDouble.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
