# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.category import Category  # noqa: F401,E501
from swagger_server.models.object import Object  # noqa: F401,E501
from swagger_server import util


class SubCategory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, category: AllOfSubCategoryCategory=None, category2: Category=None, pets: List[AllOfSubCategoryPetsItems]=None):  # noqa: E501
        """SubCategory - a model defined in Swagger

        :param category: The category of this SubCategory.  # noqa: E501
        :type category: AllOfSubCategoryCategory
        :param category2: The category2 of this SubCategory.  # noqa: E501
        :type category2: Category
        :param pets: The pets of this SubCategory.  # noqa: E501
        :type pets: List[AllOfSubCategoryPetsItems]
        """
        self.swagger_types = {
            'category': AllOfSubCategoryCategory,
            'category2': Category,
            'pets': List[AllOfSubCategoryPetsItems]
        }

        self.attribute_map = {
            'category': 'category',
            'category2': 'category2',
            'pets': 'pets'
        }
        self._category = category
        self._category2 = category2
        self._pets = pets

    @classmethod
    def from_dict(cls, dikt) -> 'SubCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubCategory of this SubCategory.  # noqa: E501
        :rtype: SubCategory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> AllOfSubCategoryCategory:
        """Gets the category of this SubCategory.


        :return: The category of this SubCategory.
        :rtype: AllOfSubCategoryCategory
        """
        return self._category

    @category.setter
    def category(self, category: AllOfSubCategoryCategory):
        """Sets the category of this SubCategory.


        :param category: The category of this SubCategory.
        :type category: AllOfSubCategoryCategory
        """

        self._category = category

    @property
    def category2(self) -> Category:
        """Gets the category2 of this SubCategory.


        :return: The category2 of this SubCategory.
        :rtype: Category
        """
        return self._category2

    @category2.setter
    def category2(self, category2: Category):
        """Sets the category2 of this SubCategory.


        :param category2: The category2 of this SubCategory.
        :type category2: Category
        """

        self._category2 = category2

    @property
    def pets(self) -> List[AllOfSubCategoryPetsItems]:
        """Gets the pets of this SubCategory.


        :return: The pets of this SubCategory.
        :rtype: List[AllOfSubCategoryPetsItems]
        """
        return self._pets

    @pets.setter
    def pets(self, pets: List[AllOfSubCategoryPetsItems]):
        """Sets the pets of this SubCategory.


        :param pets: The pets of this SubCategory.
        :type pets: List[AllOfSubCategoryPetsItems]
        """

        self._pets = pets
