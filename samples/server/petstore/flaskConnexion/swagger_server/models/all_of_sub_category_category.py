# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.category import Category  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class AllOfSubCategoryCategory(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, foo: bool=None, bar: int=None, beer: str=None, drunk: User=None):  # noqa: E501
        """AllOfSubCategoryCategory - a model defined in Swagger

        :param id: The id of this AllOfSubCategoryCategory.  # noqa: E501
        :type id: int
        :param name: The name of this AllOfSubCategoryCategory.  # noqa: E501
        :type name: str
        :param foo: The foo of this AllOfSubCategoryCategory.  # noqa: E501
        :type foo: bool
        :param bar: The bar of this AllOfSubCategoryCategory.  # noqa: E501
        :type bar: int
        :param beer: The beer of this AllOfSubCategoryCategory.  # noqa: E501
        :type beer: str
        :param drunk: The drunk of this AllOfSubCategoryCategory.  # noqa: E501
        :type drunk: User
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'foo': bool,
            'bar': int,
            'beer': str,
            'drunk': User
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'foo': 'foo',
            'bar': 'bar',
            'beer': 'beer',
            'drunk': 'drunk'
        }
        self._id = id
        self._name = name
        self._foo = foo
        self._bar = bar
        self._beer = beer
        self._drunk = drunk

    @classmethod
    def from_dict(cls, dikt) -> 'AllOfSubCategoryCategory':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AllOfSubCategoryCategory of this AllOfSubCategoryCategory.  # noqa: E501
        :rtype: AllOfSubCategoryCategory
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this AllOfSubCategoryCategory.


        :return: The id of this AllOfSubCategoryCategory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AllOfSubCategoryCategory.


        :param id: The id of this AllOfSubCategoryCategory.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this AllOfSubCategoryCategory.


        :return: The name of this AllOfSubCategoryCategory.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AllOfSubCategoryCategory.


        :param name: The name of this AllOfSubCategoryCategory.
        :type name: str
        """

        self._name = name

    @property
    def foo(self) -> bool:
        """Gets the foo of this AllOfSubCategoryCategory.


        :return: The foo of this AllOfSubCategoryCategory.
        :rtype: bool
        """
        return self._foo

    @foo.setter
    def foo(self, foo: bool):
        """Sets the foo of this AllOfSubCategoryCategory.


        :param foo: The foo of this AllOfSubCategoryCategory.
        :type foo: bool
        """

        self._foo = foo

    @property
    def bar(self) -> int:
        """Gets the bar of this AllOfSubCategoryCategory.


        :return: The bar of this AllOfSubCategoryCategory.
        :rtype: int
        """
        return self._bar

    @bar.setter
    def bar(self, bar: int):
        """Sets the bar of this AllOfSubCategoryCategory.


        :param bar: The bar of this AllOfSubCategoryCategory.
        :type bar: int
        """

        self._bar = bar

    @property
    def beer(self) -> str:
        """Gets the beer of this AllOfSubCategoryCategory.


        :return: The beer of this AllOfSubCategoryCategory.
        :rtype: str
        """
        return self._beer

    @beer.setter
    def beer(self, beer: str):
        """Sets the beer of this AllOfSubCategoryCategory.


        :param beer: The beer of this AllOfSubCategoryCategory.
        :type beer: str
        """

        self._beer = beer

    @property
    def drunk(self) -> User:
        """Gets the drunk of this AllOfSubCategoryCategory.


        :return: The drunk of this AllOfSubCategoryCategory.
        :rtype: User
        """
        return self._drunk

    @drunk.setter
    def drunk(self, drunk: User):
        """Sets the drunk of this AllOfSubCategoryCategory.


        :param drunk: The drunk of this AllOfSubCategoryCategory.
        :type drunk: User
        """

        self._drunk = drunk
