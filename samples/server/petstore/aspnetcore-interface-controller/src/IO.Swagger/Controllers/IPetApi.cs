/*
 * Swagger Petstore
 *
 * This is a sample Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/). 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public interface IPetApiController
    { 
        /// <summary>
        /// Add a new pet to the store
        /// </summary>
        
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        IActionResult AddPet([FromBody]Pet body);

        /// <summary>
        /// Deletes a pet
        /// </summary>
        
        /// <param name="petId">Pet id to delete</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        IActionResult DeletePet([FromRoute][Required]long? petId, [FromHeader]string apiKey);

        /// <summary>
        /// 
        /// </summary>
        
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        IActionResult DoCategoryStuff([FromBody]SubCategory body);

        /// <summary>
        /// Finds Pets by status
        /// </summary>
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        IActionResult FindPetsByStatus([FromQuery][Required()]List<string> status);

        /// <summary>
        /// Finds Pets by tags
        /// </summary>
        /// <remarks>Muliple tags can be provided with comma separated strings. Use\\ \\ tag1, tag2, tag3 for testing.</remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid tag value</response>
        IActionResult FindPetsByTags([FromQuery][Required()]List<string> tags);

        /// <summary>
        /// 
        /// </summary>
        
        /// <response code="200">a single random pet</response>
        IActionResult GetAllPets();

        /// <summary>
        /// Find pet by ID
        /// </summary>
        /// <remarks>Returns a single pet</remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        IActionResult GetPetById([FromRoute][Required]long? petId);

        /// <summary>
        /// 
        /// </summary>
        
        /// <response code="200">a single random pet</response>
        IActionResult GetRandomPet();

        /// <summary>
        /// Update an existing pet
        /// </summary>
        
        /// <param name="body">Pet object that needs to be added to the store</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        /// <response code="405">Validation exception</response>
        IActionResult UpdatePet([FromBody]Pet body);


        /// <summary>
        /// uploads an image
        /// </summary>
        
        /// <param name="petId">ID of pet to update</param>
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        IActionResult UploadFile([FromRoute][Required]long? petId, [FromBody]Object body);
    }
}
