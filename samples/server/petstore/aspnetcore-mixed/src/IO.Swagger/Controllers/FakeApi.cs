/*
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FakeApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer boolean types</remarks>
        /// <param name="body">Input boolean as post body</param>
        /// <response code="200">Output boolean</response>
        [HttpPost]
        [Route("/v3/fake/outer/boolean")]
        [ValidateModelState]
        [SwaggerOperation("FakeOuterBooleanSerialize")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool?), description: "Output boolean")]
        public virtual IActionResult FakeOuterBooleanSerialize([FromBody]bool? body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(bool?));
            string exampleJson = null;
            exampleJson = "true";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<bool?>(exampleJson)
                        : default(bool?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of object with outer number type</remarks>
        /// <param name="body">Input composite as post body</param>
        /// <response code="200">Output composite</response>
        [HttpPost]
        [Route("/v3/fake/outer/composite")]
        [ValidateModelState]
        [SwaggerOperation("FakeOuterCompositeSerialize")]
        [SwaggerResponse(statusCode: 200, type: typeof(OuterComposite), description: "Output composite")]
        public virtual IActionResult FakeOuterCompositeSerialize([FromBody]OuterComposite body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(OuterComposite));
            string exampleJson = null;
            exampleJson = "{\n  \"my_string\" : \"my_string\",\n  \"my_number\" : 0.8008281904610115,\n  \"my_boolean\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<OuterComposite>(exampleJson)
                        : default(OuterComposite);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer number types</remarks>
        /// <param name="body">Input number as post body</param>
        /// <response code="200">Output number</response>
        [HttpPost]
        [Route("/v3/fake/outer/number")]
        [ValidateModelState]
        [SwaggerOperation("FakeOuterNumberSerialize")]
        [SwaggerResponse(statusCode: 200, type: typeof(decimal?), description: "Output number")]
        public virtual IActionResult FakeOuterNumberSerialize([FromBody]decimal? body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(decimal?));
            string exampleJson = null;
            exampleJson = "0.8008281904610115";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<decimal?>(exampleJson)
                        : default(decimal?);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Test serialization of outer string types</remarks>
        /// <param name="body">Input string as post body</param>
        /// <response code="200">Output string</response>
        [HttpPost]
        [Route("/v3/fake/outer/string")]
        [ValidateModelState]
        [SwaggerOperation("FakeOuterStringSerialize")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Output string")]
        public virtual IActionResult FakeOuterStringSerialize([FromBody]string body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// To test \&quot;client\&quot; model
        /// </summary>
        /// <remarks>To test \&quot;client\&quot; model</remarks>
        /// <param name="body">client model</param>
        /// <response code="200">successful operation</response>
        [HttpPatch]
        [Route("/v3/fake")]
        [ValidateModelState]
        [SwaggerOperation("TestClientModel")]
        [SwaggerResponse(statusCode: 200, type: typeof(Client), description: "successful operation")]
        public virtual IActionResult TestClientModel([FromBody]Client body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Client));
            string exampleJson = null;
            exampleJson = "{\n  \"client\" : \"client\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Client>(exampleJson)
                        : default(Client);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 
        /// </summary>
        /// <remarks>Fake endpoint for testing various parameters 假端點 偽のエンドポイント 가짜 엔드 포인트 </remarks>
        /// <param name="body"></param>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        [HttpPost]
        [Route("/v3/fake")]
        [Authorize(AuthenticationSchemes = BasicAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("TestEndpointParameters")]
        public virtual IActionResult TestEndpointParameters([FromBody]Body2 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>To test enum parameters</remarks>
        /// <param name="enumHeaderStringArray">Header parameter enum test (string array)</param>
        /// <param name="enumHeaderString">Header parameter enum test (string)</param>
        /// <param name="enumQueryStringArray">Query parameter enum test (string array)</param>
        /// <param name="enumQueryString">Query parameter enum test (string)</param>
        /// <param name="enumQueryInteger">Query parameter enum test (double)</param>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/v3/fake")]
        [ValidateModelState]
        [SwaggerOperation("TestEnumParameters")]
        public virtual IActionResult TestEnumParameters([FromHeader]List<string> enumHeaderStringArray, [FromHeader]string enumHeaderString, [FromQuery]List<string> enumQueryStringArray, [FromQuery]string enumQueryString, [FromQuery]int? enumQueryInteger)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// To test enum parameters
        /// </summary>
        /// <remarks>To test enum parameters</remarks>
        /// <param name="body"></param>
        /// <response code="400">Invalid request</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/v3/fake/enum/form")]
        [ValidateModelState]
        [SwaggerOperation("TestEnumRequestBody")]
        public virtual IActionResult TestEnumRequestBody([FromBody]Body4 body)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// test inline additionalProperties
        /// </summary>
        /// <param name="body">request body</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/v3/fake/inline-additionalProperties")]
        [ValidateModelState]
        [SwaggerOperation("TestInlineAdditionalProperties")]
        public virtual IActionResult TestInlineAdditionalProperties([FromBody]Dictionary<string, string> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// test json serialization of form data
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/v3/fake/jsonFormData")]
        [ValidateModelState]
        [SwaggerOperation("TestJsonFormData")]
        public virtual IActionResult TestJsonFormData([FromBody]Body5 body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
