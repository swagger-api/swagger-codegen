/*
 * Swagger Petstore
 *
 * This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Model for testing model name same as property name
    /// </summary>
    [DataContract]
    public partial class Name : IEquatable<Name>
    { 
        /// <summary>
        /// Gets or Sets _Name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public int? _Name { get; set; }

        /// <summary>
        /// Gets or Sets SnakeCase
        /// </summary>
        [DataMember(Name="snake_case")]
        public int? SnakeCase { get; private set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name="property")]
        public string Property { get; set; }

        /// <summary>
        /// Gets or Sets _123Number
        /// </summary>
        [DataMember(Name="123Number")]
        public int? _123Number { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Name {\n");
            sb.Append("  _Name: ").Append(_Name).Append("\n");
            sb.Append("  SnakeCase: ").Append(SnakeCase).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  _123Number: ").Append(_123Number).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Name)obj);
        }

        /// <summary>
        /// Returns true if Name instances are equal
        /// </summary>
        /// <param name="other">Instance of Name to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Name other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _Name == other._Name ||
                    _Name != null &&
                    _Name.Equals(other._Name)
                ) && 
                (
                    SnakeCase == other.SnakeCase ||
                    SnakeCase != null &&
                    SnakeCase.Equals(other.SnakeCase)
                ) && 
                (
                    Property == other.Property ||
                    Property != null &&
                    Property.Equals(other.Property)
                ) && 
                (
                    _123Number == other._123Number ||
                    _123Number != null &&
                    _123Number.Equals(other._123Number)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_Name != null)
                    hashCode = hashCode * 59 + _Name.GetHashCode();
                    if (SnakeCase != null)
                    hashCode = hashCode * 59 + SnakeCase.GetHashCode();
                    if (Property != null)
                    hashCode = hashCode * 59 + Property.GetHashCode();
                    if (_123Number != null)
                    hashCode = hashCode * 59 + _123Number.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Name left, Name right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Name left, Name right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
