openapi: 3.0.0
info:
  version: '2018-11-29'
  x-release: v4
  title: AmazonApiGatewayV2
  description: Amazon API Gateway V2
  x-logo:
    url: 'https://twitter.com/awscloud/profile_image?size=original'
    backgroundColor: '#FFFFFF'
  termsOfService: 'https://aws.amazon.com/service-terms/'
  contact:
    name: Mike Ralphson
    email: mike.ralphson@gmail.com
    url: 'https://github.com/mermade/aws2openapi'
    x-twitter: PermittedSoc
  license:
    name: Apache 2.0 License
    url: 'http://www.apache.org/licenses/'
  x-providerName: amazonaws.com
  x-serviceName: apigatewayv2
  x-aws-signingName: apigateway
  x-origin:
    - contentType: application/json
      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/apigatewayv2-2018-11-29.normal.json'
      converter:
        url: 'https://github.com/mermade/aws2openapi'
        version: 1.0.0
      x-apisguru-driver: external
  x-apiClientRegistration:
    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'
  x-apisguru-categories:
    - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: 'https://docs.aws.amazon.com/apigateway/'
servers:
  - url: 'http://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'https://apigateway.{region}.amazonaws.com'
    variables:
      region:
        description: The AWS region
        enum:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - us-gov-west-1
          - us-gov-east-1
          - ca-central-1
          - eu-north-1
          - eu-west-1
          - eu-west-2
          - eu-west-3
          - eu-central-1
          - eu-south-1
          - af-south-1
          - ap-northeast-1
          - ap-northeast-2
          - ap-northeast-3
          - ap-southeast-1
          - ap-southeast-2
          - ap-east-1
          - ap-south-1
          - sa-east-1
          - me-south-1
        default: us-east-1
    description: The AmazonApiGatewayV2 multi-region endpoint
  - url: 'http://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
  - url: 'https://apigateway.{region}.amazonaws.com.cn'
    variables:
      region:
        description: The AWS region
        enum:
          - cn-north-1
          - cn-northwest-1
        default: cn-north-1
    description: The AmazonApiGatewayV2 endpoint for China (Beijing) and China (Ningxia)
x-hasEquivalentPaths: true
paths:
  /v2/apis:
    post:
      operationId: CreateApi
      description: Creates an Api resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - protocolType
              properties:
                apiKeySelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                corsConfiguration:
                  description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                  type: object
                  properties:
                    AllowCredentials:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: allowCredentials
                          description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                    AllowHeaders:
                      allOf:
                        - $ref: '#/components/schemas/CorsHeaderList'
                        - xml:
                            name: allowHeaders
                          description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                    AllowMethods:
                      allOf:
                        - $ref: '#/components/schemas/CorsMethodList'
                        - xml:
                            name: allowMethods
                          description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                    AllowOrigins:
                      allOf:
                        - $ref: '#/components/schemas/CorsOriginList'
                        - xml:
                            name: allowOrigins
                          description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                    ExposeHeaders:
                      allOf:
                        - $ref: '#/components/schemas/CorsHeaderList'
                        - xml:
                            name: exposeHeaders
                          description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                    MaxAge:
                      allOf:
                        - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
                        - xml:
                            name: maxAge
                          description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                  type: boolean
                disableExecuteApiEndpoint:
                  description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
                  type: boolean
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                protocolType:
                  description: Represents a protocol type.
                  type: string
                  enum:
                    - WEBSOCKET
                    - HTTP
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
                target:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                version:
                  description: 'A string with a length between [1-64].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApis
      description: Gets a collection of Api resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApisResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
    put:
      operationId: ImportApi
      description: Imports an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: basepath
          in: query
          required: false
          description: 'Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.'
          schema:
            type: string
        - name: failOnWarnings
          in: query
          required: false
          description: 'Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.'
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The OpenAPI definition. Supported only for HTTP APIs.
                  type: string
  '/v2/domainnames/{domainName}/apimappings':
    post:
      operationId: CreateApiMapping
      description: Creates an API mapping.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
                - stage
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                stage:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMappings
      description: Gets API mappings.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/authorizers':
    post:
      operationId: CreateAuthorizer
      description: Creates an Authorizer for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - authorizerType
                - identitySource
                - name
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerPayloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                authorizerResultTtlInSeconds:
                  description: 'An integer with a value between [0-3600].'
                  type: integer
                  minimum: 0
                  maximum: 3600
                authorizerType:
                  description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
                  type: string
                  enum:
                    - REQUEST
                    - JWT
                authorizerUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                enableSimpleResponses:
                  description: 'Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
                  type: boolean
                identitySource:
                  description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                identityValidationExpression:
                  description: 'A string with a length between [0-1024].'
                  type: string
                jwtConfiguration:
                  description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                  type: object
                  properties:
                    Audience:
                      allOf:
                        - $ref: '#/components/schemas/__listOf__string'
                        - xml:
                            name: audience
                          description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                    Issuer:
                      allOf:
                        - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                        - xml:
                            name: issuer
                          description: |-
                            The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                           . Required for the JWT authorizer type. Supported only for HTTP APIs.
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizers
      description: Gets the Authorizers for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizersResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/deployments':
    post:
      operationId: CreateDeployment
      description: Creates a Deployment for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                stageName:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployments
      description: Gets the Deployments for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  /v2/domainnames:
    post:
      operationId: CreateDomainName
      description: Creates a domain name.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
        '484':
          description: AccessDeniedException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - domainName
              properties:
                domainName:
                  description: 'A string with a length between [1-512].'
                  type: string
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainNameConfiguration'
                mutualTlsAuthentication:
                  description: The mutual TLS authentication configuration for a custom domain name.
                  type: object
                  properties:
                    TruststoreUri:
                      allOf:
                        - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                        - xml:
                            name: truststoreUri
                          description: 'An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
                    TruststoreVersion:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And64'
                        - xml:
                            name: truststoreVersion
                          description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainNames
      description: Gets the domain names for an AWS account.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNamesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/integrations':
    post:
      operationId: CreateIntegration
      description: Creates an Integration.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationType
              properties:
                connectionId:
                  description: 'A string with a length between [1-1024].'
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                integrationMethod:
                  description: 'A string with a length between [1-64].'
                  type: string
                integrationSubtype:
                  description: 'A string with a length between [1-128].'
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                payloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestParameters:
                  description: |-
                    <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                              , where
                                <replaceable>{location}</replaceable>
                               is querystring, path, or header; and
                                <replaceable>{name}</replaceable>
                               must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                requestTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                responseParameters:
                  description: Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/IntegrationParameters'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                timeoutInMillis:
                  description: 'An integer with a value between [50-30000].'
                  type: integer
                  minimum: 50
                  maximum: 30000
                tlsConfig:
                  description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
                  type: object
                  properties:
                    ServerNameToVerify:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And512'
                        - xml:
                            name: serverNameToVerify
                          description: 'If you specify a server name, API Gateway uses it to verify the hostname on the integration''s certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrations
      description: Gets the Integrations for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses':
    post:
      operationId: CreateIntegrationResponse
      description: Creates an IntegrationResponses.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - integrationResponseKey
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                responseParameters:
                  description: |-
                    <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                              , where
                                <replaceable>{location}</replaceable>
                               is querystring, path, or header; and
                                <replaceable>{name}</replaceable>
                               must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                responseTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponses
      description: Gets the IntegrationResponses for an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponsesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/models':
    post:
      operationId: CreateModel
      description: Creates a Model for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - schema
              properties:
                contentType:
                  description: 'A string with a length between [1-256].'
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                schema:
                  description: 'A string with a length between [0-32768].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModels
      description: Gets the Models for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/routes':
    post:
      operationId: CreateRoute
      description: Creates a Route for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeKey
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                  type: boolean
                authorizationScopes:
                  description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                  type: array
                  items:
                    $ref: '#/components/schemas/StringWithLengthBetween1And64'
                authorizationType:
                  description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                    - JWT
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                operationName:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeResponseSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string with a length between [1-128].'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoutes
      description: Gets the Routes for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRoutesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses':
    post:
      operationId: CreateRouteResponse
      description: Creates a RouteResponse for a Route.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - routeResponseKey
              properties:
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponses
      description: Gets the RouteResponses for a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponsesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
  '/v2/apis/{apiId}/stages':
    post:
      operationId: CreateStage
      description: Creates a Stage for an API.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - stageName
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      allOf:
                        - $ref: '#/components/schemas/Arn'
                        - xml:
                            name: destinationArn
                          description: The ARN of the CloudWatch Logs log group to receive access logs.
                    Format:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                        - xml:
                            name: format
                          description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
                autoDeploy:
                  description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                  type: boolean
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: dataTraceEnabled
                          description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                    DetailedMetricsEnabled:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: detailedMetricsEnabled
                          description: Specifies whether detailed metrics are enabled.
                    LoggingLevel:
                      allOf:
                        - $ref: '#/components/schemas/LoggingLevel'
                        - xml:
                            name: loggingLevel
                          description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                    ThrottlingBurstLimit:
                      allOf:
                        - $ref: '#/components/schemas/__integer'
                        - xml:
                            name: throttlingBurstLimit
                          description: Specifies the throttling burst limit.
                    ThrottlingRateLimit:
                      allOf:
                        - $ref: '#/components/schemas/__double'
                        - xml:
                            name: throttlingRateLimit
                          description: Specifies the throttling rate limit.
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/RouteSettings'
                stageName:
                  description: 'A string with a length between [1-128].'
                  type: string
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And2048'
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStages
      description: Gets the Stages for an API.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStagesResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  /v2/vpclinks:
    post:
      operationId: CreateVpcLink
      description: Creates a VPC link.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVpcLinkResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - subnetIds
              properties:
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                securityGroupIds:
                  description: A list of security group IDs for the VPC link.
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                subnetIds:
                  description: A list of subnet IDs to include in the VPC link.
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVpcLinks
      description: Gets a collection of VPC links.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVpcLinksResponse'
        '480':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: maxResults
          in: query
          required: false
          description: The maximum number of elements to be returned for this resource.
          schema:
            type: string
        - name: nextToken
          in: query
          required: false
          description: The next page of elements from this collection. Not valid for the last element of the collection.
          schema:
            type: string
  '/v2/apis/{apiId}/stages/{stageName}/accesslogsettings':
    delete:
      operationId: DeleteAccessLogSettings
      description: 'Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.'
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}':
    delete:
      operationId: DeleteApi
      description: Deletes an Api resource.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApi
      description: Gets an Api resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    put:
      operationId: ReimportApi
      description: Puts an Api resource.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReimportApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: basepath
          in: query
          required: false
          description: 'Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.'
          schema:
            type: string
        - name: failOnWarnings
          in: query
          required: false
          description: 'Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.'
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - body
              properties:
                body:
                  description: The OpenAPI definition. Supported only for HTTP APIs.
                  type: string
    patch:
      operationId: UpdateApi
      description: Updates an Api resource.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeySelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                corsConfiguration:
                  description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
                  type: object
                  properties:
                    AllowCredentials:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: allowCredentials
                          description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
                    AllowHeaders:
                      allOf:
                        - $ref: '#/components/schemas/CorsHeaderList'
                        - xml:
                            name: allowHeaders
                          description: Represents a collection of allowed headers. Supported only for HTTP APIs.
                    AllowMethods:
                      allOf:
                        - $ref: '#/components/schemas/CorsMethodList'
                        - xml:
                            name: allowMethods
                          description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
                    AllowOrigins:
                      allOf:
                        - $ref: '#/components/schemas/CorsOriginList'
                        - xml:
                            name: allowOrigins
                          description: Represents a collection of allowed origins. Supported only for HTTP APIs.
                    ExposeHeaders:
                      allOf:
                        - $ref: '#/components/schemas/CorsHeaderList'
                        - xml:
                            name: exposeHeaders
                          description: Represents a collection of exposed headers. Supported only for HTTP APIs.
                    MaxAge:
                      allOf:
                        - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
                        - xml:
                            name: maxAge
                          description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                disableSchemaValidation:
                  description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
                  type: boolean
                disableExecuteApiEndpoint:
                  description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
                  type: boolean
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                version:
                  description: 'A string with a length between [1-64].'
                  type: string
  '/v2/domainnames/{domainName}/apimappings/{apiMappingId}':
    delete:
      operationId: DeleteApiMapping
      description: Deletes an API mapping.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetApiMapping
      description: Gets an API mapping.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateApiMapping
      description: The API mapping.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiMappingResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiMappingId
          in: path
          required: true
          description: The API mapping identifier.
          schema:
            type: string
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiId
              properties:
                apiId:
                  description: The identifier.
                  type: string
                apiMappingKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                stage:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/authorizers/{authorizerId}':
    delete:
      operationId: DeleteAuthorizer
      description: Deletes an Authorizer.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetAuthorizer
      description: Gets an Authorizer.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
    patch:
      operationId: UpdateAuthorizer
      description: Updates an Authorizer.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAuthorizerResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: authorizerId
          in: path
          required: true
          description: The authorizer identifier.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                authorizerCredentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                authorizerPayloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                authorizerResultTtlInSeconds:
                  description: 'An integer with a value between [0-3600].'
                  type: integer
                  minimum: 0
                  maximum: 3600
                authorizerType:
                  description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
                  type: string
                  enum:
                    - REQUEST
                    - JWT
                authorizerUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                enableSimpleResponses:
                  description: 'Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
                  type: boolean
                identitySource:
                  description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
                  type: array
                  items:
                    $ref: '#/components/schemas/__string'
                identityValidationExpression:
                  description: 'A string with a length between [0-1024].'
                  type: string
                jwtConfiguration:
                  description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
                  type: object
                  properties:
                    Audience:
                      allOf:
                        - $ref: '#/components/schemas/__listOf__string'
                        - xml:
                            name: audience
                          description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
                    Issuer:
                      allOf:
                        - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                        - xml:
                            name: issuer
                          description: |-
                            The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                                           . Required for the JWT authorizer type. Supported only for HTTP APIs.
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/cors':
    delete:
      operationId: DeleteCorsConfiguration
      description: Deletes a CORS configuration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/deployments/{deploymentId}':
    delete:
      operationId: DeleteDeployment
      description: Deletes a Deployment.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDeployment
      description: Gets a Deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
    patch:
      operationId: UpdateDeployment
      description: Updates a Deployment.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDeploymentResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: deploymentId
          in: path
          required: true
          description: The deployment ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
  '/v2/domainnames/{domainName}':
    delete:
      operationId: DeleteDomainName
      description: Deletes a domain name.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetDomainName
      description: Gets a domain name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
    patch:
      operationId: UpdateDomainName
      description: Updates a domain name.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDomainNameResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: domainName
          in: path
          required: true
          description: The domain name.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domainNameConfigurations:
                  description: The domain name configurations.
                  type: array
                  items:
                    $ref: '#/components/schemas/DomainNameConfiguration'
                mutualTlsAuthentication:
                  description: The mutual TLS authentication configuration for a custom domain name.
                  type: object
                  properties:
                    TruststoreUri:
                      allOf:
                        - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
                        - xml:
                            name: truststoreUri
                          description: 'An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
                    TruststoreVersion:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And64'
                        - xml:
                            name: truststoreVersion
                          description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
  '/v2/apis/{apiId}/integrations/{integrationId}':
    delete:
      operationId: DeleteIntegration
      description: Deletes an Integration.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegration
      description: Gets an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegration
      description: Updates an Integration.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                connectionId:
                  description: 'A string with a length between [1-1024].'
                  type: string
                connectionType:
                  description: Represents a connection type.
                  type: string
                  enum:
                    - INTERNET
                    - VPC_LINK
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                credentialsArn:
                  description: Represents an Amazon Resource Name (ARN).
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                integrationMethod:
                  description: 'A string with a length between [1-64].'
                  type: string
                integrationSubtype:
                  description: 'A string with a length between [1-128].'
                  type: string
                integrationType:
                  description: Represents an API method integration type.
                  type: string
                  enum:
                    - AWS
                    - HTTP
                    - MOCK
                    - HTTP_PROXY
                    - AWS_PROXY
                integrationUri:
                  description: 'A string representation of a URI with a length between [1-2048].'
                  type: string
                passthroughBehavior:
                  description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - WHEN_NO_MATCH
                    - NEVER
                    - WHEN_NO_TEMPLATES
                payloadFormatVersion:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestParameters:
                  description: |-
                    <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                              , where
                                <replaceable>{location}</replaceable>
                               is querystring, path, or header; and
                                <replaceable>{name}</replaceable>
                               must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                requestTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                responseParameters:
                  description: Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/IntegrationParameters'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                timeoutInMillis:
                  description: 'An integer with a value between [50-30000].'
                  type: integer
                  minimum: 50
                  maximum: 30000
                tlsConfig:
                  description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
                  type: object
                  properties:
                    ServerNameToVerify:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And512'
                        - xml:
                            name: serverNameToVerify
                          description: 'If you specify a server name, API Gateway uses it to verify the hostname on the integration''s certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.'
  '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}':
    delete:
      operationId: DeleteIntegrationResponse
      description: Deletes an IntegrationResponses.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetIntegrationResponse
      description: Gets an IntegrationResponses.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
    patch:
      operationId: UpdateIntegrationResponse
      description: Updates an IntegrationResponses.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateIntegrationResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: integrationId
          in: path
          required: true
          description: The integration ID.
          schema:
            type: string
        - name: integrationResponseId
          in: path
          required: true
          description: The integration response ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentHandlingStrategy:
                  description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
                  type: string
                  enum:
                    - CONVERT_TO_BINARY
                    - CONVERT_TO_TEXT
                integrationResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                responseParameters:
                  description: |-
                    <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                              , where
                                <replaceable>{location}</replaceable>
                               is querystring, path, or header; and
                                <replaceable>{name}</replaceable>
                               must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And512'
                responseTemplates:
                  description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And32K'
                templateSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
  '/v2/apis/{apiId}/models/{modelId}':
    delete:
      operationId: DeleteModel
      description: Deletes a Model.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetModel
      description: Gets a Model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    patch:
      operationId: UpdateModel
      description: Updates a Model.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contentType:
                  description: 'A string with a length between [1-256].'
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
                schema:
                  description: 'A string with a length between [0-32768].'
                  type: string
  '/v2/apis/{apiId}/routes/{routeId}':
    delete:
      operationId: DeleteRoute
      description: Deletes a Route.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRoute
      description: Gets a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    patch:
      operationId: UpdateRoute
      description: Updates a Route.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResult'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                apiKeyRequired:
                  description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
                  type: boolean
                authorizationScopes:
                  description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
                  type: array
                  items:
                    $ref: '#/components/schemas/StringWithLengthBetween1And64'
                authorizationType:
                  description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
                  type: string
                  enum:
                    - NONE
                    - AWS_IAM
                    - CUSTOM
                    - JWT
                authorizerId:
                  description: The identifier.
                  type: string
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                operationName:
                  description: 'A string with a length between [1-64].'
                  type: string
                requestModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                requestParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
                routeResponseSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                target:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}':
    delete:
      operationId: DeleteRouteRequestParameter
      description: Deletes a route request parameter.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: requestParameterKey
          in: path
          required: true
          description: The route request parameter key.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}':
    delete:
      operationId: DeleteRouteResponse
      description: Deletes a RouteResponse.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetRouteResponse
      description: Gets a RouteResponse.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
    patch:
      operationId: UpdateRouteResponse
      description: Updates a RouteResponse.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRouteResponseResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeId
          in: path
          required: true
          description: The route ID.
          schema:
            type: string
        - name: routeResponseId
          in: path
          required: true
          description: The route response ID.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                modelSelectionExpression:
                  description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
                  type: string
                responseModels:
                  description: The route models.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And128'
                responseParameters:
                  description: The route parameters.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/ParameterConstraints'
                routeResponseKey:
                  description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
                  type: string
  '/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}':
    delete:
      operationId: DeleteRouteSettings
      description: Deletes the RouteSettings for a stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: routeKey
          in: path
          required: true
          description: The route key.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/stages/{stageName}':
    delete:
      operationId: DeleteStage
      description: Deletes a Stage.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetStage
      description: Gets a Stage.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.'
          schema:
            type: string
    patch:
      operationId: UpdateStage
      description: Updates a Stage.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStageResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessLogSettings:
                  description: Settings for logging access in a stage.
                  type: object
                  properties:
                    DestinationArn:
                      allOf:
                        - $ref: '#/components/schemas/Arn'
                        - xml:
                            name: destinationArn
                          description: The ARN of the CloudWatch Logs log group to receive access logs.
                    Format:
                      allOf:
                        - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
                        - xml:
                            name: format
                          description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
                autoDeploy:
                  description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
                  type: boolean
                clientCertificateId:
                  description: The identifier.
                  type: string
                defaultRouteSettings:
                  description: Represents a collection of route settings.
                  type: object
                  properties:
                    DataTraceEnabled:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: dataTraceEnabled
                          description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
                    DetailedMetricsEnabled:
                      allOf:
                        - $ref: '#/components/schemas/__boolean'
                        - xml:
                            name: detailedMetricsEnabled
                          description: Specifies whether detailed metrics are enabled.
                    LoggingLevel:
                      allOf:
                        - $ref: '#/components/schemas/LoggingLevel'
                        - xml:
                            name: loggingLevel
                          description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
                    ThrottlingBurstLimit:
                      allOf:
                        - $ref: '#/components/schemas/__integer'
                        - xml:
                            name: throttlingBurstLimit
                          description: Specifies the throttling burst limit.
                    ThrottlingRateLimit:
                      allOf:
                        - $ref: '#/components/schemas/__double'
                        - xml:
                            name: throttlingRateLimit
                          description: Specifies the throttling rate limit.
                deploymentId:
                  description: The identifier.
                  type: string
                description:
                  description: 'A string with a length between [0-1024].'
                  type: string
                routeSettings:
                  description: The route settings map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/RouteSettings'
                stageVariables:
                  description: The stage variable map.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween0And2048'
  '/v2/vpclinks/{vpcLinkId}':
    delete:
      operationId: DeleteVpcLink
      description: Deletes a VPC link.
      responses:
        '202':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVpcLinkResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: vpcLinkId
          in: path
          required: true
          description: The ID of the VPC link.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    get:
      operationId: GetVpcLink
      description: Gets a VPC link.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetVpcLinkResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: vpcLinkId
          in: path
          required: true
          description: The ID of the VPC link.
          schema:
            type: string
    patch:
      operationId: UpdateVpcLink
      description: Updates a VPC link.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVpcLinkResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: vpcLinkId
          in: path
          required: true
          description: The ID of the VPC link.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: 'A string with a length between [1-128].'
                  type: string
  '/v2/apis/{apiId}/exports/{specification}#outputType':
    get:
      operationId: ExportApi
      description: ''
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportApiResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: exportVersion
          in: query
          required: false
          description: 'The version of the API Gateway export algorithm. API Gateway uses the latest version by default. Currently, the only supported version is 1.0.'
          schema:
            type: string
        - name: includeExtensions
          in: query
          required: false
          description: 'Specifies whether to include <a href="https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html">API Gateway extensions</a> in the exported API definition. API Gateway extensions are included by default.'
          schema:
            type: boolean
        - name: outputType
          in: query
          required: true
          description: The output type of the exported definition file. Valid values are JSON and YAML.
          schema:
            type: string
        - name: specification
          in: path
          required: true
          description: 'The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only supported value.'
          schema:
            type: string
        - name: stageName
          in: query
          required: false
          description: 'The name of the API stage to export. If you don''t specify this property, a representation of the latest API configuration is exported.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/stages/{stageName}/cache/authorizers':
    delete:
      operationId: ResetAuthorizersCache
      description: Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: stageName
          in: path
          required: true
          description: 'The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.'
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/apis/{apiId}/models/{modelId}/template':
    get:
      operationId: GetModelTemplate
      description: Gets a model template.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelTemplateResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
      parameters:
        - name: apiId
          in: path
          required: true
          description: The API identifier.
          schema:
            type: string
        - name: modelId
          in: path
          required: true
          description: The model ID.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
  '/v2/tags/{resource-arn}':
    get:
      operationId: GetTags
      description: Gets a collection of Tag resources.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTagsResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
    post:
      operationId: TagResource
      description: Creates a new Tag resource to represent a tag.
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceResponse'
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tags:
                  description: Represents a collection of tags associated with the resource.
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/StringWithLengthBetween1And1600'
  '/v2/tags/{resource-arn}#tagKeys':
    delete:
      operationId: UntagResource
      description: Deletes a Tag.
      responses:
        '204':
          description: Success
        '480':
          description: NotFoundException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
        '481':
          description: TooManyRequestsException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TooManyRequestsException'
        '482':
          description: BadRequestException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
        '483':
          description: ConflictException
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
      parameters:
        - name: resource-arn
          in: path
          required: true
          description: The resource ARN for the tag.
          schema:
            type: string
        - name: tagKeys
          in: query
          required: true
          description: The Tag keys to delete
          schema:
            type: array
            items:
              $ref: '#/components/schemas/__string'
    parameters:
      - $ref: '#/components/parameters/X-Amz-Content-Sha256'
      - $ref: '#/components/parameters/X-Amz-Date'
      - $ref: '#/components/parameters/X-Amz-Algorithm'
      - $ref: '#/components/parameters/X-Amz-Credential'
      - $ref: '#/components/parameters/X-Amz-Security-Token'
      - $ref: '#/components/parameters/X-Amz-Signature'
      - $ref: '#/components/parameters/X-Amz-SignedHeaders'
components:
  parameters:
    X-Amz-Content-Sha256:
      name: X-Amz-Content-Sha256
      in: header
      schema:
        type: string
      required: false
    X-Amz-Date:
      name: X-Amz-Date
      in: header
      schema:
        type: string
      required: false
    X-Amz-Algorithm:
      name: X-Amz-Algorithm
      in: header
      schema:
        type: string
      required: false
    X-Amz-Credential:
      name: X-Amz-Credential
      in: header
      schema:
        type: string
      required: false
    X-Amz-Security-Token:
      name: X-Amz-Security-Token
      in: header
      schema:
        type: string
      required: false
    X-Amz-Signature:
      name: X-Amz-Signature
      in: header
      schema:
        type: string
      required: false
    X-Amz-SignedHeaders:
      name: X-Amz-SignedHeaders
      in: header
      schema:
        type: string
      required: false
  securitySchemes:
    hmac:
      type: apiKey
      name: Authorization
      in: header
      description: Amazon Signature authorization v4
      x-amazon-apigateway-authtype: awsSigv4
  schemas:
    CreateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
    __boolean:
      type: boolean
    CorsHeaderList:
      type: array
      description: Represents a collection of allowed headers. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
    CorsMethodList:
      type: array
      description: Represents a collection of methods. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
    CorsOriginList:
      type: array
      description: Represents a collection of origins. Supported only for HTTP APIs.
      items:
        $ref: '#/components/schemas/__string'
    IntegerWithLengthBetweenMinus1And86400:
      type: integer
      description: An integer with a value between -1 and 86400. Supported only for HTTP APIs.
      minimum: -1
      maximum: 86400
    StringWithLengthBetween1And1600:
      type: string
      description: 'A string with a length between [0-1600].'
    NotFoundException: {}
    TooManyRequestsException: {}
    BadRequestException: {}
    ConflictException: {}
    CreateApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiMappingId
              description: The API mapping identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
    CreateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter. Supported only for REQUEST authorizers.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
    __string:
      type: string
    __listOf__string:
      type: array
      items:
        $ref: '#/components/schemas/__string'
    UriWithLengthBetween1And2048:
      type: string
      description: 'A string representation of a URI with a length between [1-2048].'
    CreateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeployed
              description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - xml:
                name: deploymentStatus
              description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: deploymentStatusMessage
              description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment.
    CreateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiMappingSelectionExpression
              description: The API mapping selection expression.
        DomainName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: domainName
              description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthentication'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags associated with a domain name.
    DomainNameConfiguration:
      type: object
      properties:
        ApiGatewayDomainName:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiGatewayDomainName
              description: A domain name for the API.
        CertificateArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: certificateArn
              description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
        CertificateName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: certificateName
              description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
        CertificateUploadDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: certificateUploadDate
              description: The timestamp when the certificate that was used by edge-optimized endpoint for this domain name was uploaded.
        DomainNameStatus:
          allOf:
            - $ref: '#/components/schemas/DomainNameStatus'
            - xml:
                name: domainNameStatus
              description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
        DomainNameStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: domainNameStatusMessage
              description: An optional text message containing detailed information about status of the domain name migration.
        EndpointType:
          allOf:
            - $ref: '#/components/schemas/EndpointType'
            - xml:
                name: endpointType
              description: The endpoint type.
        HostedZoneId:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: hostedZoneId
              description: The Amazon Route 53 Hosted Zone ID of the endpoint.
        SecurityPolicy:
          allOf:
            - $ref: '#/components/schemas/SecurityPolicy'
            - xml:
                name: securityPolicy
              description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
      description: The domain name configuration.
    StringWithLengthBetween1And64:
      type: string
      description: 'A string with a length between [1-64].'
    AccessDeniedException: {}
    CreateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: Represents the description of an integration.
        IntegrationId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationId
              description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: integrationResponseSelectionExpression
              description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                          , where
                            <replaceable>{location}</replaceable>
                           is querystring, path, or header; and
                            <replaceable>{name}</replaceable>
                           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfig'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
    StringWithLengthBetween1And512:
      type: string
      description: 'A string with a length between [1-512].'
    StringWithLengthBetween0And32K:
      type: string
      description: 'A string with a length between [0-32768].'
    IntegrationParameters:
      type: object
      description: |-
        <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                  , where
                    <replaceable>{location}</replaceable>
                   is querystring, path, or header; and
                    <replaceable>{name}</replaceable>
                   must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And512'
    CreateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationResponseId
              description: The integration response ID.
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expressions for the integration response.
    CreateModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        ModelId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: modelId
              description: The model identifier.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    CreateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeId
              description: The route ID.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
    StringWithLengthBetween1And128:
      type: string
      description: 'A string with a length between [1-128].'
    ParameterConstraints:
      type: object
      properties:
        Required:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: required
              description: Whether or not the parameter is required.
      description: 'Validation constraints imposed on parameters of a request (path, query string, headers).'
    CreateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeResponseId
              description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: Represents the route response key of a route response.
    CreateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: Default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: lastDeploymentStatusMessage
              description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: lastUpdatedDate
              description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: 'Route settings for the stage, by routeKey.'
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
    Arn:
      type: string
      description: Represents an Amazon Resource Name (ARN).
    StringWithLengthBetween1And1024:
      type: string
      description: 'A string with a length between [1-1024].'
    LoggingLevel:
      type: string
      enum:
        - ERROR
        - INFO
        - 'OFF'
      description: The logging level.
    __integer:
      type: integer
    __double:
      type: number
      format: double
    RouteSettings:
      type: object
      properties:
        DataTraceEnabled:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: dataTraceEnabled
              description: Specifies whether (true) or not (false) data trace logging is enabled for this route. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.
        DetailedMetricsEnabled:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: detailedMetricsEnabled
              description: Specifies whether detailed metrics are enabled.
        LoggingLevel:
          allOf:
            - $ref: '#/components/schemas/LoggingLevel'
            - xml:
                name: loggingLevel
              description: 'Specifies the logging level for this route: INFO, ERROR, or OFF. This property affects the log entries pushed to Amazon CloudWatch Logs. Supported only for WebSocket APIs.'
        ThrottlingBurstLimit:
          allOf:
            - $ref: '#/components/schemas/__integer'
            - xml:
                name: throttlingBurstLimit
              description: Specifies the throttling burst limit.
        ThrottlingRateLimit:
          allOf:
            - $ref: '#/components/schemas/__double'
            - xml:
                name: throttlingRateLimit
              description: Specifies the throttling rate limit.
      description: Represents a collection of route settings.
    StringWithLengthBetween0And2048:
      type: string
      description: 'A string with a length between [0-2048].'
    CreateVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the VPC link was created.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - xml:
                name: securityGroupIds
              description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - xml:
                name: subnetIds
              description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: Tags for the VPC link.
        VpcLinkId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: vpcLinkId
              description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
            - $ref: '#/components/schemas/VpcLinkStatus'
            - xml:
                name: vpcLinkStatus
              description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: vpcLinkStatusMessage
              description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
            - $ref: '#/components/schemas/VpcLinkVersion'
            - xml:
                name: vpcLinkVersion
              description: The version of the VPC link.
    DeleteVpcLinkResponse:
      type: object
      properties: {}
    ExportApiResponse:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/ExportedApi'
    GetApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
    GetApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiMappingId
              description: The API mapping identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
    GetApiMappingsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfApiMapping'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetApisResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfApi'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter. Supported only for REQUEST authorizers.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
    GetAuthorizersResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfAuthorizer'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeployed
              description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - xml:
                name: deploymentStatus
              description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: deploymentStatusMessage
              description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment.
    GetDeploymentsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfDeployment'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiMappingSelectionExpression
              description: The API mapping selection expression.
        DomainName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: domainName
              description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthentication'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags associated with a domain name.
    GetDomainNamesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfDomainName'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: Represents the description of an integration.
        IntegrationId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationId
              description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: integrationResponseSelectionExpression
              description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                          , where
                            <replaceable>{location}</replaceable>
                           is querystring, path, or header; and
                            <replaceable>{name}</replaceable>
                           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfig'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
    GetIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationResponseId
              description: The integration response ID.
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expressions for the integration response.
    GetIntegrationResponsesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfIntegrationResponse'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetIntegrationsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfIntegration'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        ModelId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: modelId
              description: The model identifier.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    GetModelTemplateResponse:
      type: object
      properties:
        Value:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: value
              description: The template value.
    GetModelsResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfModel'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeId
              description: The route ID.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
    GetRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeResponseId
              description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: Represents the route response key of a route response.
    GetRouteResponsesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfRouteResponse'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetRoutesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfRoute'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: Default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: lastDeploymentStatusMessage
              description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: lastUpdatedDate
              description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: 'Route settings for the stage, by routeKey.'
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
    GetStagesResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfStage'
            - xml:
                name: items
              description: The elements from this collection.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetTagsResponse:
      type: object
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
    GetVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the VPC link was created.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - xml:
                name: securityGroupIds
              description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - xml:
                name: subnetIds
              description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: Tags for the VPC link.
        VpcLinkId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: vpcLinkId
              description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
            - $ref: '#/components/schemas/VpcLinkStatus'
            - xml:
                name: vpcLinkStatus
              description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: vpcLinkStatusMessage
              description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
            - $ref: '#/components/schemas/VpcLinkVersion'
            - xml:
                name: vpcLinkVersion
              description: The version of the VPC link.
    GetVpcLinksResponse:
      type: object
      properties:
        Items:
          allOf:
            - $ref: '#/components/schemas/__listOfVpcLink'
            - xml:
                name: items
              description: A collection of VPC links.
        NextToken:
          allOf:
            - $ref: '#/components/schemas/NextToken'
            - xml:
                name: nextToken
              description: The next page of elements from this collection. Not valid for the last element of the collection.
    ImportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
    ReimportApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
    TagResourceResponse:
      type: object
      properties: {}
    UpdateApiResponse:
      type: object
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
    UpdateApiMappingResponse:
      type: object
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiMappingId
              description: The API mapping identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
    UpdateAuthorizerResponse:
      type: object
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter. Supported only for REQUEST authorizers.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
    UpdateDeploymentResponse:
      type: object
      properties:
        AutoDeployed:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeployed
              description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - xml:
                name: deploymentStatus
              description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: deploymentStatusMessage
              description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment.
    UpdateDomainNameResponse:
      type: object
      properties:
        ApiMappingSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiMappingSelectionExpression
              description: The API mapping selection expression.
        DomainName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: domainName
              description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthentication'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags associated with a domain name.
    UpdateIntegrationResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: Represents the description of an integration.
        IntegrationId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationId
              description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: integrationResponseSelectionExpression
              description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                          , where
                            <replaceable>{location}</replaceable>
                           is querystring, path, or header; and
                            <replaceable>{name}</replaceable>
                           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfig'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
    UpdateIntegrationResponseResponse:
      type: object
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationResponseId
              description: The integration response ID.
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expressions for the integration response.
    UpdateModelResponse:
      type: object
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        ModelId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: modelId
              description: The model identifier.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
    UpdateRouteResult:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeId
              description: The route ID.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
    UpdateRouteResponseResponse:
      type: object
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeResponseId
              description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: Represents the route response key of a route response.
    UpdateStageResponse:
      type: object
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: Default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: lastDeploymentStatusMessage
              description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: lastUpdatedDate
              description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: 'Route settings for the stage, by routeKey.'
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
    UpdateVpcLinkResponse:
      type: object
      properties:
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the VPC link was created.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - xml:
                name: securityGroupIds
              description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - xml:
                name: subnetIds
              description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: Tags for the VPC link.
        VpcLinkId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: vpcLinkId
              description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
            - $ref: '#/components/schemas/VpcLinkStatus'
            - xml:
                name: vpcLinkStatus
              description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: vpcLinkStatusMessage
              description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
            - $ref: '#/components/schemas/VpcLinkVersion'
            - xml:
                name: vpcLinkVersion
              description: The version of the VPC link.
    AccessLogSettings:
      type: object
      properties:
        DestinationArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: destinationArn
              description: The ARN of the CloudWatch Logs log group to receive access logs.
        Format:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: format
              description: 'A single line format of the access logs of data, as specified by selected $context variables. The format must include at least $context.requestId.'
      description: Settings for logging access in a stage.
    Id:
      type: string
      description: The identifier.
    SelectionExpression:
      type: string
      description: 'An expression used to extract information at runtime. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for more information.'
    Cors:
      type: object
      properties:
        AllowCredentials:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: allowCredentials
              description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
        AllowHeaders:
          allOf:
            - $ref: '#/components/schemas/CorsHeaderList'
            - xml:
                name: allowHeaders
              description: Represents a collection of allowed headers. Supported only for HTTP APIs.
        AllowMethods:
          allOf:
            - $ref: '#/components/schemas/CorsMethodList'
            - xml:
                name: allowMethods
              description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
        AllowOrigins:
          allOf:
            - $ref: '#/components/schemas/CorsOriginList'
            - xml:
                name: allowOrigins
              description: Represents a collection of allowed origins. Supported only for HTTP APIs.
        ExposeHeaders:
          allOf:
            - $ref: '#/components/schemas/CorsHeaderList'
            - xml:
                name: exposeHeaders
              description: Represents a collection of exposed headers. Supported only for HTTP APIs.
        MaxAge:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetweenMinus1And86400'
            - xml:
                name: maxAge
              description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
      description: 'Represents a CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
    __timestampIso8601:
      type: string
      format: date-time
    StringWithLengthBetween0And1024:
      type: string
      description: 'A string with a length between [0-1024].'
    ProtocolType:
      type: string
      enum:
        - WEBSOCKET
        - HTTP
      description: Represents a protocol type.
    Tags:
      type: object
      description: Represents a collection of tags associated with the resource.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And1600'
    Api:
      type: object
      required:
        - RouteSelectionExpression
        - Name
        - ProtocolType
      properties:
        ApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: apiEndpoint
              description: 'The URI of the API, of the form {api-id}.execute-api.{region}.amazonaws.com. The stage name is typically appended to this URI to form a complete path to a deployed API stage.'
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: Specifies whether an API is managed by API Gateway. You can't update or delete a managed API by using API Gateway. A managed API can be deleted only through the tooling or service that created it.
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API ID.
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the API was created.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        ImportInfo:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: importInfo
              description: The validation information during API import. This may include particular properties of your OpenAPI definition which are ignored during import. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A collection of tags associated with the API.
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
        Warnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: warnings
              description: The warning messages reported when failonwarnings is turned on during API import.
      description: Represents an API.
    SelectionKey:
      type: string
      description: 'After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">Selection Expressions</a> for a list of expressions and each expression''s associated selection key type.'
    ApiMapping:
      type: object
      required:
        - Stage
        - ApiId
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiMappingId
              description: The API mapping identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
      description: Represents an API mapping.
    AuthorizationScopes:
      type: array
      description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
      items:
        $ref: '#/components/schemas/StringWithLengthBetween1And64'
    AuthorizationType:
      type: string
      enum:
        - NONE
        - AWS_IAM
        - CUSTOM
        - JWT
      description: 'The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
    IntegerWithLengthBetween0And3600:
      type: integer
      description: 'An integer with a value between [0-3600].'
      minimum: 0
      maximum: 3600
    AuthorizerType:
      type: string
      enum:
        - REQUEST
        - JWT
      description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
    IdentitySourceList:
      type: array
      description: 'The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.'
      items:
        $ref: '#/components/schemas/__string'
    JWTConfiguration:
      type: object
      properties:
        Audience:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: audience
              description: 'A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list. See <a href="https://tools.ietf.org/html/rfc7519#section-4.1.3">RFC 7519</a>. Supported only for HTTP APIs.'
        Issuer:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: issuer
              description: |-
                The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: https://cognito-idp.<replaceable>{region}</replaceable>.amazonaws.com/<replaceable>{userPoolId}</replaceable>
                               . Required for the JWT authorizer type. Supported only for HTTP APIs.
      description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
    Authorizer:
      type: object
      required:
        - Name
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter. Supported only for REQUEST authorizers.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The authorizer identifier.
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: The validation expression does not apply to the REQUEST authorizer.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
      description: Represents an authorizer.
    ConnectionType:
      type: string
      enum:
        - INTERNET
        - VPC_LINK
      description: Represents a connection type.
    ContentHandlingStrategy:
      type: string
      enum:
        - CONVERT_TO_BINARY
        - CONVERT_TO_TEXT
      description: Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
    CreateApiMappingRequest:
      type: object
      required:
        - Stage
        - ApiId
      title: CreateApiMappingRequest
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
      description: Creates a new ApiMapping resource to represent an API mapping.
    CreateApiRequest:
      type: object
      required:
        - ProtocolType
        - Name
      title: CreateApiRequest
      properties:
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: 'A CORS configuration. Supported only for HTTP APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html">Configuring CORS</a> for more information.'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null. Currently, this property is not used for HTTP integrations. Supported only for HTTP APIs.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        ProtocolType:
          allOf:
            - $ref: '#/components/schemas/ProtocolType'
            - xml:
                name: protocolType
              description: The API protocol.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: 'This property is part of quick create. If you don''t specify a routeKey, a default route of $default is created. The $default route acts as a catch-all for any request made to your API, for a particular stage. The $default route key can''t be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.'
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
        Target:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: target
              description: 'This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.'
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
      description: Creates a new Api resource to represent an API.
    CreateAuthorizerRequest:
      type: object
      required:
        - AuthorizerType
        - IdentitySource
        - Name
      title: CreateAuthorizerRequest
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter. Supported only for REQUEST authorizers.'
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: This parameter is not used.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
      description: Creates a new Authorizer resource to represent an authorizer.
    CreateDeploymentRequest:
      type: object
      title: CreateDeploymentRequest
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment resource.
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the Stage resource for the Deployment resource to create.
      description: Creates a new Deployment resource to represent a deployment.
    DeploymentStatus:
      type: string
      enum:
        - PENDING
        - FAILED
        - DEPLOYED
      description: Represents a deployment status.
    DomainNameConfigurations:
      type: array
      description: The domain name configurations.
      items:
        $ref: '#/components/schemas/DomainNameConfiguration'
    MutualTlsAuthenticationInput:
      type: object
      properties:
        TruststoreUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: truststoreUri
              description: 'An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
        TruststoreVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: truststoreVersion
              description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
    CreateDomainNameRequest:
      type: object
      required:
        - DomainName
      title: CreateDomainNameRequest
      properties:
        DomainName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: domainName
              description: The domain name.
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthenticationInput'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags associated with a domain name.
      description: Creates a new DomainName resource to represent a domain name.
    MutualTlsAuthentication:
      type: object
      properties:
        TruststoreUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: truststoreUri
              description: 'An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://<replaceable>bucket-name</replaceable>/<replaceable>key-name</replaceable>. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.'
        TruststoreVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: truststoreVersion
              description: 'The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.'
        TruststoreWarnings:
          allOf:
            - $ref: '#/components/schemas/__listOf__string'
            - xml:
                name: truststoreWarnings
              description: 'A list of warnings that API Gateway returns while processing your truststore. Invalid certificates produce warnings. Mutual TLS is still enabled, but some clients might not be able to access your API. To resolve warnings, upload a new truststore to S3, and then update you domain name to use the new version.'
    IntegrationType:
      type: string
      enum:
        - AWS
        - HTTP
        - MOCK
        - HTTP_PROXY
        - AWS_PROXY
      description: Represents an API method integration type.
    PassthroughBehavior:
      type: string
      enum:
        - WHEN_NO_MATCH
        - NEVER
        - WHEN_NO_TEMPLATES
      description: Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
    TemplateMap:
      type: object
      description: A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And32K'
    ResponseParameters:
      type: object
      description: Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
      additionalProperties:
        $ref: '#/components/schemas/IntegrationParameters'
    IntegerWithLengthBetween50And30000:
      type: integer
      description: 'An integer with a value between [50-30000].'
      minimum: 50
      maximum: 30000
    TlsConfigInput:
      type: object
      properties:
        ServerNameToVerify:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: serverNameToVerify
              description: 'If you specify a server name, API Gateway uses it to verify the hostname on the integration''s certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.'
      description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
    CreateIntegrationRequest:
      type: object
      required:
        - IntegrationType
      title: CreateIntegrationRequest
      properties:
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the integration.
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                               , where
                                  <replaceable>{location}</replaceable>
                                is querystring, path, or header; and
                                  <replaceable>{name}</replaceable>
                                must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfigInput'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
      description: Creates a new Integration resource to represent an integration.
    TlsConfig:
      type: object
      properties:
        ServerNameToVerify:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: serverNameToVerify
              description: 'If you specify a server name, API Gateway uses it to verify the hostname on the integration''s certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.'
      description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
    CreateIntegrationResponseRequest:
      type: object
      required:
        - IntegrationResponseKey
      title: CreateIntegrationResponseRequest
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where {name} is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where {name} is a valid and unique response header name and {JSON-expression} is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration response. Supported only for WebSocket APIs.
      description: Creates a new IntegrationResponse resource to represent an integration response.
    StringWithLengthBetween1And256:
      type: string
      description: 'A string with a length between [1-256].'
    CreateModelRequest:
      type: object
      required:
        - Schema
        - Name
      title: CreateModelRequest
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: Creates a new Model.
    RouteModels:
      type: object
      description: The route models.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween1And128'
    RouteParameters:
      type: object
      description: The route parameters.
      additionalProperties:
        $ref: '#/components/schemas/ParameterConstraints'
    CreateRouteRequest:
      type: object
      required:
        - RouteKey
      title: CreateRouteRequest
      properties:
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: The authorization scopes supported by this route.
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
      description: Creates a new Route resource to represent a route.
    CreateRouteResponseRequest:
      type: object
      required:
        - RouteResponseKey
      title: CreateRouteResponseRequest
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: The response models for the route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: The route response parameters.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: The route response key.
      description: Creates a new RouteResponse resource to represent a route response.
    RouteSettingsMap:
      type: object
      description: The route settings map.
      additionalProperties:
        $ref: '#/components/schemas/RouteSettings'
    StageVariablesMap:
      type: object
      description: The stage variable map.
      additionalProperties:
        $ref: '#/components/schemas/StringWithLengthBetween0And2048'
    CreateStageRequest:
      type: object
      required:
        - StageName
      title: CreateStageRequest
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: The default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The deployment identifier of the API stage.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the API stage.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: 'Route settings for the stage, by routeKey.'
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
      description: Creates a new Stage resource to represent a stage.
    SecurityGroupIdList:
      type: array
      description: A list of security group IDs for the VPC link.
      items:
        $ref: '#/components/schemas/__string'
    SubnetIdList:
      type: array
      description: A list of subnet IDs to include in the VPC link.
      items:
        $ref: '#/components/schemas/__string'
    CreateVpcLinkRequest:
      type: object
      required:
        - SubnetIds
        - Name
      title: CreateVpcLinkRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - xml:
                name: securityGroupIds
              description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - xml:
                name: subnetIds
              description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: A list of tags.
      description: Creates a VPC link
    VpcLinkStatus:
      type: string
      enum:
        - PENDING
        - AVAILABLE
        - DELETING
        - FAILED
        - INACTIVE
      description: The status of the VPC link.
    VpcLinkVersion:
      type: string
      enum:
        - V2
      description: The version of the VPC link.
    DeleteAccessLogSettingsRequest:
      type: object
      title: DeleteAccessLogSettingsRequest
      properties: {}
    DeleteApiMappingRequest:
      type: object
      title: DeleteApiMappingRequest
      properties: {}
    DeleteApiRequest:
      type: object
      title: DeleteApiRequest
      properties: {}
    DeleteAuthorizerRequest:
      type: object
      title: DeleteAuthorizerRequest
      properties: {}
    DeleteCorsConfigurationRequest:
      type: object
      title: DeleteCorsConfigurationRequest
      properties: {}
    DeleteDeploymentRequest:
      type: object
      title: DeleteDeploymentRequest
      properties: {}
    DeleteDomainNameRequest:
      type: object
      title: DeleteDomainNameRequest
      properties: {}
    DeleteIntegrationRequest:
      type: object
      title: DeleteIntegrationRequest
      properties: {}
    DeleteIntegrationResponseRequest:
      type: object
      title: DeleteIntegrationResponseRequest
      properties: {}
    DeleteModelRequest:
      type: object
      title: DeleteModelRequest
      properties: {}
    DeleteRouteRequest:
      type: object
      title: DeleteRouteRequest
      properties: {}
    DeleteRouteRequestParameterRequest:
      type: object
      title: DeleteRouteRequestParameterRequest
      properties: {}
    DeleteRouteResponseRequest:
      type: object
      title: DeleteRouteResponseRequest
      properties: {}
    DeleteRouteSettingsRequest:
      type: object
      title: DeleteRouteSettingsRequest
      properties: {}
    DeleteStageRequest:
      type: object
      title: DeleteStageRequest
      properties: {}
    DeleteVpcLinkRequest:
      type: object
      title: DeleteVpcLinkRequest
      properties: {}
    Deployment:
      type: object
      properties:
        AutoDeployed:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeployed
              description: Specifies whether a deployment was automatically released.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The date and time when the Deployment resource was created.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier for the deployment.
        DeploymentStatus:
          allOf:
            - $ref: '#/components/schemas/DeploymentStatus'
            - xml:
                name: deploymentStatus
              description: 'The status of the deployment: PENDING, FAILED, or SUCCEEDED.'
        DeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: deploymentStatusMessage
              description: May contain additional feedback on the status of an API deployment.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment.
      description: An immutable representation of an API that can be called by users. A Deployment must be associated with a Stage for it to be callable over the internet.
    DomainName:
      type: object
      required:
        - DomainName
      properties:
        ApiMappingSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiMappingSelectionExpression
              description: The API mapping selection expression.
        DomainName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And512'
            - xml:
                name: domainName
              description: The name of the DomainName resource.
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthentication'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags associated with a domain name.
      description: Represents a domain name.
    DomainNameStatus:
      type: string
      enum:
        - AVAILABLE
        - UPDATING
      description: 'The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.'
    EndpointType:
      type: string
      enum:
        - REGIONAL
        - EDGE
      description: Represents an endpoint type.
    SecurityPolicy:
      type: string
      enum:
        - TLS_1_0
        - TLS_1_2
      description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
    ExportApiRequest:
      type: object
      title: ExportApiRequest
      properties: {}
    ExportedApi:
      type: string
      description: 'Represents an exported definition of an API in a particular output format, for example, YAML. The API is serialized to the requested specification, for example, OpenAPI 3.0.'
    ResetAuthorizersCacheRequest:
      type: object
      title: ResetAuthorizersCacheRequest
      properties: {}
    GetApiMappingRequest:
      type: object
      title: GetApiMappingRequest
      properties: {}
    GetApiMappingsRequest:
      type: object
      title: GetApiMappingsRequest
      properties: {}
    __listOfApiMapping:
      type: array
      items:
        $ref: '#/components/schemas/ApiMapping'
    NextToken:
      type: string
      description: The next page of elements from this collection. Not valid for the last element of the collection.
    GetApiRequest:
      type: object
      title: GetApiRequest
      properties: {}
    GetApisRequest:
      type: object
      title: GetApisRequest
      properties: {}
    __listOfApi:
      type: array
      items:
        $ref: '#/components/schemas/Api'
    GetAuthorizerRequest:
      type: object
      title: GetAuthorizerRequest
      properties: {}
    GetAuthorizersRequest:
      type: object
      title: GetAuthorizersRequest
      properties: {}
    __listOfAuthorizer:
      type: array
      items:
        $ref: '#/components/schemas/Authorizer'
    GetDeploymentRequest:
      type: object
      title: GetDeploymentRequest
      properties: {}
    GetDeploymentsRequest:
      type: object
      title: GetDeploymentsRequest
      properties: {}
    __listOfDeployment:
      type: array
      items:
        $ref: '#/components/schemas/Deployment'
    GetDomainNameRequest:
      type: object
      title: GetDomainNameRequest
      properties: {}
    GetDomainNamesRequest:
      type: object
      title: GetDomainNamesRequest
      properties: {}
    __listOfDomainName:
      type: array
      items:
        $ref: '#/components/schemas/DomainName'
    GetIntegrationRequest:
      type: object
      title: GetIntegrationRequest
      properties: {}
    GetIntegrationResponseRequest:
      type: object
      title: GetIntegrationResponseRequest
      properties: {}
    GetIntegrationResponsesRequest:
      type: object
      title: GetIntegrationResponsesRequest
      properties: {}
    __listOfIntegrationResponse:
      type: array
      items:
        $ref: '#/components/schemas/IntegrationResponse'
    GetIntegrationsRequest:
      type: object
      title: GetIntegrationsRequest
      properties: {}
    __listOfIntegration:
      type: array
      items:
        $ref: '#/components/schemas/Integration'
    GetModelRequest:
      type: object
      title: GetModelRequest
      properties: {}
    GetModelTemplateRequest:
      type: object
      title: GetModelTemplateRequest
      properties: {}
    GetModelsRequest:
      type: object
      title: GetModelsRequest
      properties: {}
    __listOfModel:
      type: array
      items:
        $ref: '#/components/schemas/Model'
    GetRouteRequest:
      type: object
      title: GetRouteRequest
      properties: {}
    GetRouteResponseRequest:
      type: object
      title: GetRouteResponseRequest
      properties: {}
    GetRouteResponsesRequest:
      type: object
      title: GetRouteResponsesRequest
      properties: {}
    __listOfRouteResponse:
      type: array
      items:
        $ref: '#/components/schemas/RouteResponse'
    GetRoutesRequest:
      type: object
      title: GetRoutesRequest
      properties: {}
    __listOfRoute:
      type: array
      items:
        $ref: '#/components/schemas/Route'
    GetStageRequest:
      type: object
      title: GetStageRequest
      properties: {}
    GetStagesRequest:
      type: object
      title: GetStagesRequest
      properties: {}
    __listOfStage:
      type: array
      items:
        $ref: '#/components/schemas/Stage'
    GetTagsRequest:
      type: object
      title: GetTagsRequest
      properties: {}
    GetVpcLinkRequest:
      type: object
      title: GetVpcLinkRequest
      properties: {}
    GetVpcLinksRequest:
      type: object
      title: GetVpcLinksRequest
      properties: {}
    __listOfVpcLink:
      type: array
      items:
        $ref: '#/components/schemas/VpcLink'
    ImportApiRequest:
      type: object
      required:
        - Body
      title: ImportApiRequest
      properties:
        Body:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: body
              description: The OpenAPI definition. Supported only for HTTP APIs.
      description: ''
    Integration:
      type: object
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether an integration is managed by API Gateway. If you created an API using using quick create, the resulting integration is managed by API Gateway. You can update a managed integration, but you can''t delete it.'
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: Represents the description of an integration.
        IntegrationId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationId
              description: Represents the identifier of an integration.
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: integrationResponseSelectionExpression
              description: 'The integration response selection expression for the integration. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-integration-response-selection-expressions">Integration Response Selection Expressions</a>.'
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                          , where
                            <replaceable>{location}</replaceable>
                           is querystring, path, or header; and
                            <replaceable>{name}</replaceable>
                           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API itegrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to backend integrations. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt;. The action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration. Supported only for WebSocket APIs.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfig'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
      description: Represents an integration.
    IntegrationResponse:
      type: object
      required:
        - IntegrationResponseKey
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: integrationResponseId
              description: The integration response ID.
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: 'A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.{name}, where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.{name} or integration.response.body.{JSON-expression}, where name is a valid and unique response header name and JSON-expression is a valid JSON expression without the $ prefix.'
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expressions for the integration response.
      description: Represents an integration response.
    Model:
      type: object
      required:
        - Name
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        ModelId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: modelId
              description: The model identifier.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model. Must be alphanumeric.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: 'Represents a data model for an API. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/models-mappings.html">Create Models and Mapping Templates for Request and Response Mappings</a>.'
    ReimportApiRequest:
      type: object
      required:
        - Body
      title: ReimportApiRequest
      properties:
        Body:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: body
              description: The OpenAPI definition. Supported only for HTTP APIs.
      description: ''
    Route:
      type: object
      required:
        - RouteKey
      properties:
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a route is managed by API Gateway. If you created an API using quick create, the $default route is managed by API Gateway. You can''t modify the $default route key.'
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for this route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: 'A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.'
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeId
              description: The route ID.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
      description: Represents a route.
    RouteResponse:
      type: object
      required:
        - RouteResponseKey
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: Represents the model selection expression of a route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: Represents the response models of a route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: Represents the response parameters of a route response.
        RouteResponseId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: routeResponseId
              description: Represents the identifier of a route response.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: Represents the route response key of a route response.
      description: Represents a route response.
    Stage:
      type: object
      required:
        - StageName
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        ApiGatewayManaged:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiGatewayManaged
              description: 'Specifies whether a stage is managed by API Gateway. If you created an API using quick create, the $default stage is managed by API Gateway. You can''t modify the $default stage.'
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage. Supported only for WebSocket APIs.
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the stage was created.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: Default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The identifier of the Deployment that the Stage is associated with. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the stage.
        LastDeploymentStatusMessage:
          allOf:
            - $ref: '#/components/schemas/__string'
            - xml:
                name: lastDeploymentStatusMessage
              description: Describes the status of the last deployment of a stage. Supported only for stages with autoDeploy enabled.
        LastUpdatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: lastUpdatedDate
              description: The timestamp when the stage was last updated.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: 'Route settings for the stage, by routeKey.'
        StageName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stageName
              description: The name of the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a stage resource. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
      description: Represents an API stage.
    TagResourceRequest:
      type: object
      title: TagResourceRequest
      properties:
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: The collection of tags. Each tag element is associated with a given resource.
      description: Creates a new Tag resource to represent a tag.
    UntagResourceRequest:
      type: object
      title: UntagResourceRequest
      properties: {}
    UpdateApiMappingRequest:
      type: object
      required:
        - ApiId
      title: UpdateApiMappingRequest
      properties:
        ApiId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: apiId
              description: The API identifier.
        ApiMappingKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: apiMappingKey
              description: The API mapping key.
        Stage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: stage
              description: The API stage.
      description: Updates an ApiMapping.
    UpdateApiRequest:
      type: object
      title: UpdateApiRequest
      properties:
        ApiKeySelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: apiKeySelectionExpression
              description: 'An API key selection expression. Supported only for WebSocket APIs. See <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions">API Key Selection Expressions</a>.'
        CorsConfiguration:
          allOf:
            - $ref: '#/components/schemas/Cors'
            - xml:
                name: corsConfiguration
              description: A CORS configuration. Supported only for HTTP APIs.
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, don''t specify this parameter. Currently, this property is not used for HTTP integrations. If provided, this value replaces the credentials associated with the quick create integration. Supported only for HTTP APIs.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the API.
        DisableSchemaValidation:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableSchemaValidation
              description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        DisableExecuteApiEndpoint:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: disableExecuteApiEndpoint
              description: 'Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.'
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the API.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: 'This property is part of quick create. If not specified, the route created using quick create is kept. Otherwise, this value replaces the route key of the quick create route. Additional routes may still be added after the API is updated. Supported only for HTTP APIs.'
        RouteSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeSelectionExpression
              description: 'The route selection expression for the API. For HTTP APIs, the routeSelectionExpression must be ${request.method} ${request.path}. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.'
        Target:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: target
              description: 'This property is part of quick create. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. The value provided updates the integration URI and integration type. You can update a quick-created target, but you can''t remove it from an API. Supported only for HTTP APIs.'
        Version:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: version
              description: A version identifier for the API.
      description: Updates an Api.
    UpdateAuthorizerRequest:
      type: object
      title: UpdateAuthorizerRequest
      properties:
        AuthorizerCredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: authorizerCredentialsArn
              description: 'Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, don''t specify this parameter.'
        AuthorizerPayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: authorizerPayloadFormatVersion
              description: 'Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are 1.0 and 2.0. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.'
        AuthorizerResultTtlInSeconds:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween0And3600'
            - xml:
                name: authorizerResultTtlInSeconds
              description: 'The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.'
        AuthorizerType:
          allOf:
            - $ref: '#/components/schemas/AuthorizerType'
            - xml:
                name: authorizerType
              description: The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
        AuthorizerUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: authorizerUri
              description: |-
                The authorizer's Uniform Resource Identifier (URI). For REQUEST authorizers, this must be a well-formed Lambda function URI, for example, arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:<replaceable>{account_id}</replaceable>:function:<replaceable>{lambda_function_name}</replaceable>/invocations. In general, the URI has this form: arn:aws:apigateway:<replaceable>{region}</replaceable>:lambda:path/<replaceable>{service_api}</replaceable>
                               , where <replaceable></replaceable>{region} is the same as the region hosting the Lambda function, path indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial /. For Lambda functions, this is usually of the form /2015-03-31/functions/[FunctionARN]/invocations. Supported only for REQUEST authorizers.
        EnableSimpleResponses:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: enableSimpleResponses
              description: 'Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>'
        IdentitySource:
          allOf:
            - $ref: '#/components/schemas/IdentitySourceList'
            - xml:
                name: identitySource
              description: '<p>The identity source for which authorization is requested.</p> <p>For a REQUEST authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with $, for example, $request.header.Auth, $request.querystring.Name. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html">Working with AWS Lambda authorizers for HTTP APIs</a>.</p> <p>For JWT, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example $request.header.Authorization.</p>'
        IdentityValidationExpression:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: identityValidationExpression
              description: This parameter is not used.
        JwtConfiguration:
          allOf:
            - $ref: '#/components/schemas/JWTConfiguration'
            - xml:
                name: jwtConfiguration
              description: Represents the configuration of a JWT authorizer. Required for the JWT authorizer type. Supported only for HTTP APIs.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the authorizer.
      description: Updates an Authorizer.
    UpdateDeploymentRequest:
      type: object
      title: UpdateDeploymentRequest
      properties:
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the deployment resource.
      description: Updates a Deployment.
    UpdateDomainNameRequest:
      type: object
      title: UpdateDomainNameRequest
      properties:
        DomainNameConfigurations:
          allOf:
            - $ref: '#/components/schemas/DomainNameConfigurations'
            - xml:
                name: domainNameConfigurations
              description: The domain name configurations.
        MutualTlsAuthentication:
          allOf:
            - $ref: '#/components/schemas/MutualTlsAuthenticationInput'
            - xml:
                name: mutualTlsAuthentication
              description: The mutual TLS authentication configuration for a custom domain name.
      description: Updates a DomainName.
    UpdateIntegrationRequest:
      type: object
      title: UpdateIntegrationRequest
      properties:
        ConnectionId:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And1024'
            - xml:
                name: connectionId
              description: The ID of the VPC link for a private integration. Supported only for HTTP APIs.
        ConnectionType:
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
            - xml:
                name: connectionType
              description: The type of the network connection to the integration endpoint. Specify INTERNET for connections through the public routable internet or VPC_LINK for private connections between API Gateway and resources in a VPC. The default value is INTERNET.
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        CredentialsArn:
          allOf:
            - $ref: '#/components/schemas/Arn'
            - xml:
                name: credentialsArn
              description: 'Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role''s Amazon Resource Name (ARN). To require that the caller''s identity be passed through from the request, specify the string arn:aws:iam::*:user/*. To use resource-based permissions on supported AWS services, specify null.'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the integration
        IntegrationMethod:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: integrationMethod
              description: Specifies the integration's HTTP method type.
        IntegrationSubtype:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: integrationSubtype
              description: 'Supported only for HTTP API AWS_PROXY integrations. Specifies the AWS service action to invoke. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services-reference.html">Integration subtype reference</a>.'
        IntegrationType:
          allOf:
            - $ref: '#/components/schemas/IntegrationType'
            - xml:
                name: integrationType
              description: '<p>The integration type of an integration. One of the following:</p> <p>AWS: for integrating the route or method request with an AWS service action, including the Lambda function-invoking action. With the Lambda function-invoking action, this is referred to as the Lambda custom integration. With any other AWS service action, this is known as AWS integration. Supported only for WebSocket APIs.</p> <p>AWS_PROXY: for integrating the route or method request with a Lambda function or other AWS service action. This integration is also referred to as a Lambda proxy integration.</p> <p>HTTP: for integrating the route or method request with an HTTP endpoint. This integration is also referred to as the HTTP custom integration. Supported only for WebSocket APIs.</p> <p>HTTP_PROXY: for integrating the route or method request with an HTTP endpoint, with the client request passed through as-is. This is also referred to as HTTP proxy integration. For HTTP API private integrations, use an HTTP_PROXY integration.</p> <p>MOCK: for integrating the route or method request with API Gateway as a "loopback" endpoint without invoking any backend. Supported only for WebSocket APIs.</p>'
        IntegrationUri:
          allOf:
            - $ref: '#/components/schemas/UriWithLengthBetween1And2048'
            - xml:
                name: integrationUri
              description: '<p>For a Lambda integration, specify the URI of a Lambda function.</p> <p>For an HTTP integration, specify a fully-qualified URL.</p> <p>For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service. If you specify the ARN of an AWS Cloud Map service, API Gateway uses DiscoverInstances to identify resources. You can use query parameters to target specific resources. To learn more, see <a href="https://docs.aws.amazon.com/cloud-map/latest/api/API_DiscoverInstances.html">DiscoverInstances</a>. For private integrations, all resources must be owned by the same AWS account.</p>'
        PassthroughBehavior:
          allOf:
            - $ref: '#/components/schemas/PassthroughBehavior'
            - xml:
                name: passthroughBehavior
              description: '<p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the requestTemplates property on the Integration resource. There are three valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. Supported only for WebSocket APIs.</p> <p>WHEN_NO_MATCH passes the request body for unmapped content types through to the integration backend without transformation.</p> <p>NEVER rejects unmapped content types with an HTTP 415 Unsupported Media Type response.</p> <p>WHEN_NO_TEMPLATES allows pass-through when the integration has no content types mapped to templates. However, if there is at least one content type defined, unmapped content types will be rejected with the same HTTP 415 Unsupported Media Type response.</p>'
        PayloadFormatVersion:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: payloadFormatVersion
              description: Specifies the format of the payload sent to an integration. Required for HTTP APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: requestParameters
              description: |-
                <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>
                          , where
                            <replaceable>{location}</replaceable>
                           is querystring, path, or header; and
                            <replaceable>{name}</replaceable>
                           must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations, without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.">Transforming API requests and responses</a>.</p>
        RequestTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: requestTemplates
              description: 'Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value. Supported only for WebSocket APIs.'
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/ResponseParameters'
            - xml:
                name: responseParameters
              description: 'Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients. Specify a key-value map from a selection key to response parameters. The selection key must be a valid HTTP status code within the range of 200-599. Response parameters are a key-value map. The key must match pattern &lt;action&gt;:&lt;header&gt;.&lt;location&gt; or overwrite.statuscode. The action can be append, overwrite or remove. The value can be a static value, or map to response data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html">Transforming API requests and responses</a>.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration.
        TimeoutInMillis:
          allOf:
            - $ref: '#/components/schemas/IntegerWithLengthBetween50And30000'
            - xml:
                name: timeoutInMillis
              description: 'Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs. The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.'
        TlsConfig:
          allOf:
            - $ref: '#/components/schemas/TlsConfigInput'
            - xml:
                name: tlsConfig
              description: 'The TLS configuration for a private integration. If you specify a TLS configuration, private integration traffic uses the HTTPS protocol. Supported only for HTTP APIs.'
      description: Updates an Integration.
    UpdateIntegrationResponseRequest:
      type: object
      title: UpdateIntegrationResponseRequest
      properties:
        ContentHandlingStrategy:
          allOf:
            - $ref: '#/components/schemas/ContentHandlingStrategy'
            - xml:
                name: contentHandlingStrategy
              description: '<p>Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:</p> <p>CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded string to the corresponding binary blob.</p> <p>CONVERT_TO_TEXT: Converts a response payload from a binary blob to a Base64-encoded string.</p> <p>If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.</p>'
        IntegrationResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: integrationResponseKey
              description: The integration response key.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/IntegrationParameters'
            - xml:
                name: responseParameters
              description: |-
                A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of method.response.header.<replaceable>{name}</replaceable>
                               , where name is a valid and unique header name. The mapped non-static value must match the pattern of integration.response.header.<replaceable>{name}</replaceable>
                                or integration.response.body.<replaceable>{JSON-expression}</replaceable>
                               , where
                                  <replaceable>{name}</replaceable>
                                is a valid and unique response header name and
                                  <replaceable>{JSON-expression}</replaceable>
                                is a valid JSON expression without the $ prefix.
        ResponseTemplates:
          allOf:
            - $ref: '#/components/schemas/TemplateMap'
            - xml:
                name: responseTemplates
              description: 'The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.'
        TemplateSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: templateSelectionExpression
              description: The template selection expression for the integration response. Supported only for WebSocket APIs.
      description: Updates an IntegrationResponses.
    UpdateModelRequest:
      type: object
      title: UpdateModelRequest
      properties:
        ContentType:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And256'
            - xml:
                name: contentType
              description: 'The content-type for the model, for example, "application/json".'
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description of the model.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the model.
        Schema:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And32K'
            - xml:
                name: schema
              description: 'The schema for the model. For application/json models, this should be JSON schema draft 4 model.'
      description: Updates a Model.
    UpdateRouteRequest:
      type: object
      title: UpdateRouteRequest
      properties:
        ApiKeyRequired:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: apiKeyRequired
              description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        AuthorizationScopes:
          allOf:
            - $ref: '#/components/schemas/AuthorizationScopes'
            - xml:
                name: authorizationScopes
              description: The authorization scopes supported by this route.
        AuthorizationType:
          allOf:
            - $ref: '#/components/schemas/AuthorizationType'
            - xml:
                name: authorizationType
              description: 'The authorization type for the route. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.'
        AuthorizerId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: authorizerId
              description: The identifier of the Authorizer resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route. Supported only for WebSocket APIs.
        OperationName:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And64'
            - xml:
                name: operationName
              description: The operation name for the route.
        RequestModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: requestModels
              description: The request models for the route. Supported only for WebSocket APIs.
        RequestParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: requestParameters
              description: The request parameters for the route. Supported only for WebSocket APIs.
        RouteKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeKey
              description: The route key for the route.
        RouteResponseSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: routeResponseSelectionExpression
              description: The route response selection expression for the route. Supported only for WebSocket APIs.
        Target:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: target
              description: The target for the route.
      description: Updates a Route.
    UpdateRouteResponseRequest:
      type: object
      title: UpdateRouteResponseRequest
      properties:
        ModelSelectionExpression:
          allOf:
            - $ref: '#/components/schemas/SelectionExpression'
            - xml:
                name: modelSelectionExpression
              description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ResponseModels:
          allOf:
            - $ref: '#/components/schemas/RouteModels'
            - xml:
                name: responseModels
              description: The response models for the route response.
        ResponseParameters:
          allOf:
            - $ref: '#/components/schemas/RouteParameters'
            - xml:
                name: responseParameters
              description: The route response parameters.
        RouteResponseKey:
          allOf:
            - $ref: '#/components/schemas/SelectionKey'
            - xml:
                name: routeResponseKey
              description: The route response key.
      description: Updates a RouteResponse.
    UpdateStageRequest:
      type: object
      title: UpdateStageRequest
      properties:
        AccessLogSettings:
          allOf:
            - $ref: '#/components/schemas/AccessLogSettings'
            - xml:
                name: accessLogSettings
              description: Settings for logging access in this stage.
        AutoDeploy:
          allOf:
            - $ref: '#/components/schemas/__boolean'
            - xml:
                name: autoDeploy
              description: Specifies whether updates to an API automatically trigger a new deployment. The default value is false.
        ClientCertificateId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: clientCertificateId
              description: The identifier of a client certificate for a Stage.
        DefaultRouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettings'
            - xml:
                name: defaultRouteSettings
              description: The default route settings for the stage.
        DeploymentId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: deploymentId
              description: The deployment identifier for the API stage. Can't be updated if autoDeploy is enabled.
        Description:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: description
              description: The description for the API stage.
        RouteSettings:
          allOf:
            - $ref: '#/components/schemas/RouteSettingsMap'
            - xml:
                name: routeSettings
              description: Route settings for the stage.
        StageVariables:
          allOf:
            - $ref: '#/components/schemas/StageVariablesMap'
            - xml:
                name: stageVariables
              description: 'A map that defines the stage variables for a Stage. Variable names can have alphanumeric and underscore characters, and the values must match [A-Za-z0-9-._~:/?#&amp;=,]+.'
      description: Updates a Stage.
    UpdateVpcLinkRequest:
      type: object
      title: UpdateVpcLinkRequest
      properties:
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
      description: Updates a VPC link.
    VpcLink:
      type: object
      required:
        - VpcLinkId
        - SecurityGroupIds
        - SubnetIds
        - Name
      properties:
        CreatedDate:
          allOf:
            - $ref: '#/components/schemas/__timestampIso8601'
            - xml:
                name: createdDate
              description: The timestamp when the VPC link was created.
        Name:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween1And128'
            - xml:
                name: name
              description: The name of the VPC link.
        SecurityGroupIds:
          allOf:
            - $ref: '#/components/schemas/SecurityGroupIdList'
            - xml:
                name: securityGroupIds
              description: A list of security group IDs for the VPC link.
        SubnetIds:
          allOf:
            - $ref: '#/components/schemas/SubnetIdList'
            - xml:
                name: subnetIds
              description: A list of subnet IDs to include in the VPC link.
        Tags:
          allOf:
            - $ref: '#/components/schemas/Tags'
            - xml:
                name: tags
              description: Tags for the VPC link.
        VpcLinkId:
          allOf:
            - $ref: '#/components/schemas/Id'
            - xml:
                name: vpcLinkId
              description: The ID of the VPC link.
        VpcLinkStatus:
          allOf:
            - $ref: '#/components/schemas/VpcLinkStatus'
            - xml:
                name: vpcLinkStatus
              description: The status of the VPC link.
        VpcLinkStatusMessage:
          allOf:
            - $ref: '#/components/schemas/StringWithLengthBetween0And1024'
            - xml:
                name: vpcLinkStatusMessage
              description: A message summarizing the cause of the status of the VPC link.
        VpcLinkVersion:
          allOf:
            - $ref: '#/components/schemas/VpcLinkVersion'
            - xml:
                name: vpcLinkVersion
              description: The version of the VPC link.
      description: Represents a VPC link.
security:
  - hmac: []
