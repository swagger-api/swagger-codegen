openapi: 3.0.2
servers:
  - url: http://1password.local
  - url: http://localhost:8080/v1
info:
  contact:
    email: support@1password.com
    name: 1Password Integrations
    url: https://support.1password.com/
  description: REST API interface for 1Password Connect.
  title: 1Password Connect
  version: 0.5.0
  x-apisguru-categories:
    - security
  x-origin:
    - format: openapi
      url: https://i.1password.com/media/1password-connect/1password-connect-api.yaml
      version: "3.0"
  x-providerName: 1password.local
tags:
  - description: Access and manage items inside 1Password Vaults
    name: Items
  - description: Access 1Password Vaults
    name: Vaults
  - description: Access API Request Activity
    name: Activity
paths:
  /activity:
    get:
      operationId: GetApiActivity
      parameters:
        - description: How many API Events should be retrieved in a single request.
          in: query
          name: limit
          schema:
            default: 50
            example: 10
            type: integer
        - description: How far into the collection of API Events should the response start
          in: query
          name: offset
          schema:
            default: 0
            example: 50
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/APIRequest"
                type: array
          description: OK
          headers:
            Content-Range:
              description: An decription of what part of the collection has been returned as
                well as the total size.
              schema:
                example: 1-50/1134
                type: string
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
      security:
        - ConnectToken: []
      summary: Retrieve a list of API Requests that have been made.
      tags:
        - Activity
  /vaults:
    get:
      operationId: GetVaults
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Vault"
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
      security:
        - ConnectToken: []
      summary: Get all Vaults
      tags:
        - Vaults
  "/vaults/{vaultUuid}":
    get:
      operationId: GetVaultById
      parameters:
        - description: The UUID of the Vault to fetch Items from
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vault"
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              example:
                message: vault {itemUuid} not found
                status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Vault not found
      security:
        - ConnectToken: []
      summary: Get Vault details and metadata
      tags:
        - Vaults
  "/vaults/{vaultUuid}/items":
    get:
      operationId: GetVaultItems
      parameters:
        - description: The UUID of the Vault to fetch Items from
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
        - description: Filter the Item collection based on Item name using SCIM eq filter
          in: query
          name: filter
          schema:
            example: title eq "Some Item Name"
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Item"
                type: array
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "404":
          content:
            application/json:
              example:
                message: vault {vaultUuid} not found
                status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Vault not found
      security:
        - ConnectToken: []
      summary: Get all items for inside a Vault
      tags:
        - Items
    post:
      operationId: CreateVaultItem
      parameters:
        - description: The UUID of the Vault to create an Item in
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullItem"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullItem"
          description: OK
        "400":
          content:
            application/json:
              example:
                message: Invalid item category
                status: 400
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unable to create item due to invalid input
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Item not found
      security:
        - ConnectToken: []
      summary: Create a new Item
      tags:
        - Items
  "/vaults/{vaultUuid}/items/{itemUuid}":
    delete:
      operationId: DeleteVaultItem
      parameters:
        - description: The UUID of the Vault the item is in
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
        - description: The UUID of the Item to update
          in: path
          name: itemUuid
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "204":
          description: Successfully deleted an item
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Item not found
      security:
        - ConnectToken: []
      summary: Delete an Item
      tags:
        - Items
    get:
      operationId: GetVaultItemById
      parameters:
        - description: The UUID of the Vault to fetch Item from
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
        - description: The UUID of the Item to fetch
          in: path
          name: itemUuid
          required: true
          schema:
            format: uuid
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullItem"
          description: OK
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: item {itemUuid} not found
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Item not found
      security:
        - ConnectToken: []
      summary: Get the details of an Item
      tags:
        - Items
    patch:
      description: >
        Applies a modified [RFC6902 JSON
        Patch](https://tools.ietf.org/html/rfc6902) document to an Item or
        ItemField. This endpoint only supports `add`, `remove` and `replace`
        operations.


        When modifying a specific ItemField, the ItemField's ID in the `path` attribute of the operation object: `/fields/{fieldId}`
      operationId: PatchVaultItem
      parameters:
        - description: The UUID of the Vault the item is in
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
        - description: The UUID of the Item to update
          in: path
          name: itemUuid
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            examples:
              PatchItemAttr:
                summary: Update specific Item attributes
                value:
                  - op: replace
                    path: /favorite
                    value: true
                  - op: remove
                    path: /tags/1
              PatchItemField:
                summary: Add a new ItemField to the Item
                value:
                  - op: add
                    path: /fields
                    value:
                      label: New Field
                      type: string
                      value: hunter2
              PatchItemFieldAttr:
                summary: Modify a specific ItemField attribute.
                value:
                  - op: add
                    path: /fields/vy09gd8EXAMPLE/label
                    value: New field name
                  - op: remove
                    path: /fields/vy09gd8EXAMPLE/value
              PatchItemFieldWithID:
                summary: Modify or remove an ItemField.
                value:
                  - op: replace
                    path: /fields/h4we9a4fEXAMPLE00
                    value:
                      label: Replacement Title
                      type: string
                      value: new value
                  - op: remove
                    path: /fields/inm42xcf0EXAMPLE02
              ReplaceAllAttributes:
                summary: Replace an entire Item with new fields. Equivalent to a PUT request.
                value:
                  - op: replace
                    path: /
                    value:
                      ...: Any attr from FullItem schema
                      favorite: true
                      tags:
                        - tag1
                        - tag2
                      title: New Title
            schema:
              $ref: "#/components/schemas/Patch"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullItem"
          description: OK - Item updated. If no Patch operations were provided, Item is
            unmodified.
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: item {itemUuid} not found
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Item not found
      security:
        - ConnectToken: []
      summary: Update a subset of Item attributes
      tags:
        - Items
    put:
      operationId: UpdateVaultItem
      parameters:
        - description: The UUID of the Item's Vault
          in: path
          name: vaultUuid
          required: true
          schema:
            format: uuid
            type: string
        - description: The UUID of the Item to update
          in: path
          name: itemUuid
          required: true
          schema:
            format: uuid
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullItem"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullItem"
          description: OK
        "400":
          content:
            application/json:
              example:
                message: The item doesn't have a {example field name} field.
                status: 400
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unable to create item due to invalid input
        "401":
          content:
            application/json:
              example:
                message: Invalid token signature
                status: 401
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid or missing token
        "403":
          content:
            application/json:
              example:
                message: vault {vaultUuid} is not in scope
                status: 403
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Unauthorized access
        "404":
          content:
            application/json:
              examples:
                itemNotFound:
                  summary: Item not found
                  value:
                    message: item {itemUuid} not found
                    status: 404
                vaultNotFound:
                  summary: Vault not found
                  value:
                    message: vault {vaultUuid} not found
                    status: 404
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Item not found
      security:
        - ConnectToken: []
      summary: Update an Item
      tags:
        - Items
components:
  schemas:
    APIRequest:
      description: Represents a request that was made to the API. Including what Token
        was used and what resource was accessed.
      properties:
        action:
          enum:
            - READ
            - CREATE
            - UPDATE
            - DELETE
          type: string
        actor:
          properties:
            account:
              format: uuid
              type: string
            id:
              format: uuid
              type: string
            jti:
              format: uuid
              type: string
            requestIp:
              type: string
            userAgent:
              type: string
          type: object
        requestId:
          description: The unique id used to identify a single request.
          format: uuid
          type: string
        resource:
          properties:
            item:
              properties:
                id:
                  format: uuid
                  type: string
              type: object
            itemVersion:
              type: integer
            type:
              enum:
                - ITEM
                - VAULT
              type: string
            vault:
              properties:
                id:
                  format: uuid
                  type: string
              type: object
          type: object
        result:
          enum:
            - SUCCESS
            - DENY
          type: string
        timestamp:
          format: date-time
          readOnly: true
          type: string
      type: object
    ErrorResponse:
      properties:
        message:
          description: A message detailing the error
          type: string
        status:
          description: HTTP Status Code
          type: integer
      type: object
    FullItem:
      allOf:
        - $ref: "#/components/schemas/Item"
        - properties:
            fields:
              items:
                properties:
                  entropy:
                    description: For fields with a purpose of `PASSWORD` this is the entropy of the
                      value
                    readOnly: true
                    type: number
                  generate:
                    default: false
                    description: If value is not present then a new value should be generated for
                      this field
                    type: boolean
                  id:
                    type: string
                  label:
                    type: string
                  purpose:
                    description: Some item types, Login and Password, have fields used for autofill.
                      This property indicates that purpose and is required for
                      some item types.
                    enum:
                      - ""
                      - USERNAME
                      - PASSWORD
                      - NOTES
                    type: string
                  recipe:
                    $ref: "#/components/schemas/GeneratorRecipe"
                  section:
                    properties:
                      id:
                        format: uuid
                        type: string
                    type: object
                  type:
                    default: STRING
                    enum:
                      - STRING
                      - EMAIL
                      - CONCEALED
                      - URL
                      - TOTP
                      - DATE
                      - MONTH_YEAR
                      - MENU
                    type: string
                  value:
                    type: string
                type: object
              type: array
            sections:
              items:
                properties:
                  id:
                    format: uuid
                    type: string
                  label:
                    type: string
                type: object
              type: array
          type: object
    GeneratorRecipe:
      description: The recipe is used in conjunction with the "generate" property to
        set the character set used to generate a new secure value
      properties:
        characterSets:
          items:
            enum:
              - LETTERS
              - DIGITS
              - SYMBOLS
            type: string
          maximum: 3
          minimum: 0
          type: array
          uniqueItems: true
        length:
          default: 32
          description: Length of the generated value
          maximum: 64
          minimum: 1
          type: integer
      type: object
    Item:
      properties:
        category:
          enum:
            - LOGIN
            - PASSWORD
            - SERVER
            - DATABASE
            - CREDIT_CARD
            - MEMBERSHIP
            - PASSPORT
            - SOFTWARE_LICENSE
            - OUTDOOR_LICENSE
            - SECURE_NOTE
            - WIRELESS_ROUTER
            - BANK_ACCOUNT
            - DRIVER_LICENSE
            - IDENTITY
            - REWARD_PROGRAM
            - DOCUMENT
            - EMAIL_ACCOUNT
            - SOCIAL_SECURITY_NUMBER
            - CUSTOM
          type: string
        createdAt:
          format: date-time
          readOnly: true
          type: string
        favorite:
          default: false
          type: boolean
        id:
          format: uuid
          type: string
        lastEditedBy:
          format: uuid
          readOnly: true
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        trashed:
          default: false
          type: boolean
        updatedAt:
          format: date-time
          readOnly: true
          type: string
        urls:
          example:
            - primary: true
              url: https://example.com
            - url: https://example.org
          items:
            properties:
              href:
                format: url
                type: string
              primary:
                type: boolean
            required:
              - href
            type: object
          type: array
        vault:
          properties:
            id:
              format: uuid
              type: string
          required:
            - id
          type: object
        version:
          type: integer
      required:
        - vault
        - category
      type: object
    Patch:
      items:
        properties:
          op:
            enum:
              - add
              - remove
              - replace
            type: string
          path:
            description: An RFC6901 JSON Pointer pointing to the Item document, an Item
              Attribute, an Item Field by Field ID, or an Item Field Attribute
            example: /fields/vy09gd8EXAMPLE/label
            type: string
          value: {}
        required:
          - op
          - path
        type: object
      type: array
    Vault:
      properties:
        attributeVersion:
          description: The vault version
          type: integer
        contentVersion:
          description: The version of the vault contents
          type: integer
        createdAt:
          format: date-time
          readOnly: true
          type: string
        description:
          type: string
        id:
          format: uuid
          type: string
        items:
          description: Number of active items in the vault
          type: integer
        name:
          type: string
        type:
          enum:
            - USER_CREATED
            - PERSONAL
            - EVERYONE
            - TRANSFER
          type: string
        updatedAt:
          format: date-time
          readOnly: true
          type: string
      type: object
  securitySchemes:
    ConnectToken:
      bearerFormat: JWT
      scheme: bearer
      type: http
