{{>licenseInfo}}
package {{packageName}}

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.handle
import io.ktor.locations.location
import io.ktor.locations.Location
import io.ktor.util.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
{{#hasModel}}import {{modelPackage}}.*;{{/hasModel}}

{{#imports}}
import {{import}}
{{/imports}}

// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

{{#apiInfo}}
object Paths {
{{#apis}}
{{#operations}}
    {{#operation}}
    /**
     * {{summary}}
     * {{#unescapedNotes}}{{.}}{{/unescapedNotes}}
     {{#parameters}}* @param {{paramName}} {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/parameters}}*/
    @Location("{{path}}") class {{operationId}}({{#parameters}}val {{paramName}}: {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/parameters}})
    {{/operation}}
{{/operations}}
{{/apis}}
}
{{/apiInfo}}
