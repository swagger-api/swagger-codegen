{{>licenseInfo}}
{{#models}}{{#model}}defmodule {{moduleName}}.Model.{{classname}} do
  @moduledoc """
  {{description}}
  """

  @derive [Poison.Encoder]
  defstruct [
    {{#vars}}{{#atom}}{{baseName}}{{/atom}}{{#hasMore}},
    {{/hasMore}}{{/vars}}
  ]

  @type t :: %__MODULE__{
    {{#vars}}{{#atom}}{{baseName}}{{/atom}} => {{{datatype}}}{{#hasMore}},
    {{/hasMore}}{{/vars}}
  }
end

defimpl Poison.Decoder, for: {{moduleName}}.Model.{{classname}} do
{{#hasComplexVars}}
  import {{moduleName}}.Deserializer
  def decode(value, options) do
    value
    {{#vars}}
    {{^isPrimitiveType}}
    {{#datatype}}|> deserialize({{#atom}}{{baseName}}{{/atom}}, {{#isListContainer}}:list, {{items.datatype}}{{/isListContainer}}{{#isMapContainer}}:map, {{items.datatype}}{{/isMapContainer}}{{#isDate}}:date, nil{{/isDate}}{{#isDateTime}}:date, nil{{/isDateTime}}{{^isDate}}{{^isDateTime}}{{^isMapContainer}}{{^isListContainer}}:struct, {{datatype}}{{/isListContainer}}{{/isMapContainer}}{{/isDateTime}}{{/isDate}}, options)
    {{/datatype}}
    {{/isPrimitiveType}}
    {{/vars}}
{{/hasComplexVars}}
{{^hasComplexVars}}
  def decode(value, _options) do
    value
{{/hasComplexVars}}
  end
end
{{/model}}{{/models}}
